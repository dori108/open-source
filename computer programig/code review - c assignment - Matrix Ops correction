
#include <stdio.h>
#include <string.h>
#define MAX 10

void input_matrix(int m[][MAX], int r, int c){
    for(int i=0; i<r; i++){
        for(int j=0; j<c; j++){
            scanf("%d", &m[i][j]);
        }
    }
}

void print_matrix(int m[][MAX], int r, int c){
    for(int i=0; i<r; i++){
        for(int j=0; j<c; j++){
            printf("%d\t", m[i][j]);
        }
        printf("\n");
    }
}

void add(int m1[][MAX], int m2[][MAX], int r1, int c1, int r2, int c2){
    int res[MAX][MAX];
    for(int i = 0; i < r1; i++){
        for(int j = 0; j < c1; j++){
            res[i][j] = m1[i][j] + m2[i][j];
        }
    }
    print_matrix(res, r1, c1);
}

void multiply(int m1[][MAX], int m2[][MAX], int r1, int c1, int r2, int c2){
    int res[MAX][MAX] = {0}; // 결과 행렬 초기화
    for(int i = 0; i < r1; i++){
        for(int j = 0; j < c2; j++){
            for(int k = 0; k < c1; k++){
                res[i][j] += m1[i][k] * m2[k][j];
            }
        }
    }
    print_matrix(res, r1, c2);
}

void transpose(int m1[][MAX], int r1, int c1){
    int res[MAX][MAX];
    for(int i = 0; i < r1; i++){
        for(int j = 0; j < c1; j++){
            res[j][i] = m1[i][j];
        }
    }
    print_matrix(res, c1, r1); // 전치 행렬의 크기는 원래의 열, 행 순서입니다.
}

int main() {
    int r1, c1, r2, c2;
    int M1[MAX][MAX], M2[MAX][MAX];
    char operation[MAX];
    
    scanf("%d %d", &r1, &c1); // 첫 번째 행렬의 행과 열 입력
    input_matrix(M1, r1, c1); // 첫 번째 행렬의 요소 입력 
    
    scanf("%d %d", &r2, &c2); // 두 번째 행렬의 행과 열 입력
    input_matrix(M2, r2, c2); // 두 번째 행렬의 요소 입력

    scanf("%s", operation); // 수행할 연산 입력 (add, mult, trans 등)

    if (strcmp(operation, "add") == 0){
        if (r1 != r2 || c1 != c2) {
            printf("Matrices cannot be added\n");
            return 1;
        }
        add(M1, M2, r1, c1, r2, c2);
    }
    else if (strcmp(operation, "mult") == 0){
        if (c1 != r2) {
            printf("Matrices cannot be multiplied\n");
            return 1;
        }
        multiply(M1, M2, r1, c1, r2, c2);
    }
    else if (strcmp(operation, "trans") == 0){
        transpose(M1, r1, c1);
    }
    else {
        printf("invalid operation\n");
        return 1;
    }
    return 0;
}
