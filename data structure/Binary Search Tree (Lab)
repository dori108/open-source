
""" Node Class: storing (key, value) """
class Node:
    def __init__(self, key=None, value=None, left=None, right=None):
        self.item = [key, value]  # tuple에서 list로 변경하여 item[1] 수정 가능하게 함
        self.left = left
        self.right = right

    def key(self):
        return self.item[0]

    def value(self):
        return self.item[1]

    def set_value(self, value):
        self.item[1] = value


""" Binary Search Tree Class """
class BinarySearchTree:
    def __init__(self, root=None):
        self.root = root

    def search(self, key):  # loop version
        root = self.root
        while root is not None:
            if key == root.key():
                break
            elif key < root.key():
                root = root.left
            elif key > root.key():
                root = root.right
        return root

    """ returns node holding key and its parent"""
    def search_p(self, key):
        root, parent = self.root, None
        while root is not None:
            if key == root.key():
                break
            parent = root
            if key < root.key():
                root = root.left
            else:
                root = root.right
        return root, parent

    def insert(self, key, value=None):
        node, p = self.search_p(key)
        if node is not None and key == node.key():
            node.set_value(value)
            return node

        new_node = Node(key, value)
        if p is None:
            self.root = new_node
        elif key < p.key():
            p.left = new_node
        else:
            p.right = new_node

        return new_node

    """ replace child node of a parent """
    def replace_child(self, parent, child, new_child):
        if parent is None:
            self.root = new_child
        elif child == parent.left:
            parent.left = new_child
        else:
            parent.right = new_child

    """ replace <node> with <rep_node> """
    # p: parent of <node>
    # rep_p: parent of <rep_node>
    def replace(self, node, rep_node, p, rep_p):
        # A. REPLACE p-to-node link
        if p is None:
            self.root = rep_node
        else:
            if p.left == node:
                p.left = rep_node
            else:
                p.right = rep_node

        # B. REPLACE node-to-child(s) link(s)
        if rep_p != node:
            rep_p.left = rep_node.right
            rep_node.right = node.right

        rep_node.left = node.left

        # C. DELETE rep_p to rep_node link
        if rep_p.left == rep_node:
            rep_p.left = None
        else:
            rep_p.right = None

    def find_min_p(self, root, p):
        while root.left is not None:
            p = root
            root = root.left
        return root, p

    def delete(self, key):
        node, p = self.search_p(key)
        if node is None:
            print(f"Key {key} not found in the tree.")
            return None

        # number of children <= 1
        elif node.left is None or node.right is None:
            # determine the child (left or right?)
            child = node.left
            if node.right is not None:
                child = node.right
            self.replace_child(p, node, child)

        # number of children == 2
        else:
            # find minimum key from the right subtree
            right_min, right_min_p = self.find_min_p(node.right, node)
            # replace <node> with <right_min>
            self.replace(node, right_min, p, right_min_p)

        return node

    def preorder(self, root):
        if root is not None:
            print(root.key(), end=" ")
            self.preorder(root.left)
            self.preorder(root.right)

    def postorder(self, root):
        if root is not None:
            self.postorder(root.left)
            self.postorder(root.right)
            print(root.key(), end=" ")

    def inorder(self, root):
        if root is not None:
            self.inorder(root.left)
            print(root.key(), end=" ")
            self.inorder(root.right)
