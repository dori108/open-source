Tree

• Similar to linked list
• But each node can point to multiple nodes
• Root: no parents
• Edge: link from parent to child
• Leaf node: no children
• Siblings: children of the same parent


Level, depth and height

• Depth of a node: path-length from the root
• Height of a tree: path-length from the root to the
deepest node
• Size: total number of nodes in a tree

Binary Tree

• Each node has ≤ 2 children
• Proper binary tree Exactly 2 children Or, no children
• Full binary tree Exactly 2 children and, all leaf nodes are at same level


Tree: implementation
class Node:
  def __init__(self,item,left=None,right=None):
    self.item=item
    self.left=left
    self.right=right

n1 =Node(5)
n2 =Node(7)
root =Node(10, n1, n2)


Tree: operations
  • Basic operations
    • Insertion
    • Deletion
    • Traversal
    • Search
  • Auxiliary operations //보조자
    • Size of the tree
    • Height of the tree


Traversal
  • Depth First Traversal
    • Preorder: self-left-right
    • Inorder: left-self-right
    • Postorder: left-right-self
  • Breadth First Traversal
    • Level Order Traversal
  
1. Preorder Traversal
• Self-left-right
• Each node is processed before (pre) its subtrees

def preorder(node):
  if node is not None:
    print(node.item)
    preorder(node.left)
    preorder(node.right)

Preorder: 1 2 4 5 3 6 7


2. Inorder Traversal
• Left-self-right
• Each node is processed (in) between its subtrees

Inorder: 4 2 5 1 6 3 7

3. Level Order Traversal(레벨순회 알고리즘)
• Breadth First Traversal
• While traversing a level h,
• Keep track of nodes at the next level (h+1)
• Go to the next level and visit all the nodes tracked nodes
• Repeat this until all levels are completed

트리에서 각 레벨의 노드를 순서대로 방문하는 방법, 큐를 이용하여 구현할 수 있다.
1. 루트 노드를 큐에 추가
2. 큐에서 노드를 하나 제거, 현재 노드로 설정
3. 현재 노드를 방문
4. 현재 노드의 자식들을 큐에 추가


시간 복잡도: 𝑂(𝑛) -> 트리의 모든 노드를 한 번씩 방문하기 때문
def level_order(root):
  Q=Queue()
  if root in None:
    return
  Q.enqueue(root)
  while not Q.is_empty():
    temp =Q.dequeue()
    print(temp.item)
    if temp.left is not None:
      Q.enqueue(temp.left)
    if temp.right is not None:
      Q.enqueue(temp.right)


Level Order: 1 2 3 4 5 6 7

