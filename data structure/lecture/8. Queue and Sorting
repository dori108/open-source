시험 sorting부터 시작

• Ascending & descending order ->오름차순 & 내림차순
• Fundamental element in searching -> 검색의 기본 요소
• Algorithm Evaluation: (알고리즘의 성능 비교)
-> Number of comparisons, number of moves 둘 모두 적을수록 효율적이다.

검색 알고리즘의 종류(간략)
1. 선형 검색 (Linear Search): 리스트의 첫 번째 요소부터 마지막 요소까지 순차적으로 비교하여 원하는 값을 찾는다. 
정렬이 필요없다.
시간 복잡도는 O(n)

2. 이진 검색 (Binary Search): 정렬 필요
정중간 요소를 기준으로 원하는 값과 비교하여 탐색 범위를 절반으로 줄여 나가는 방법
시간 복잡도는 O(log n)

정렬의 대표적인 예시
1. 버블 정렬 (Bubble Sort)
두 인접한 요소를 비교하여 정렬하는 방식
리스트의 끝까지 반복하여 오름차순으로 정렬한다.
이미 정렬된 리스트의 경우 O(n)
최악의 경우, n개의 요소를 가진 배열에 대해 n(n-1)/2번의 비교가 발생하므로 O(n^2)
이동 횟수: 요소 교환이 발생할 때마다 이동이 이루어지므로, 최악의 경우 O(n^2)번의 이동이 발생
비교 횟수가 일반적으로 많아 비효율적인 정렬이다.

2. 퀵 정렬 (Quick Sort)
분할 정복 알고리즘을 이용한 리스트 정렬
피벗이라는 기준점을 선택하여 리스트를 두 부분으로 나누고 각 부분에서 자체적으로 정렬한다.
비교 횟수: 평균적으로 O(n log n)번의 비교가 발생
이동 횟수: 요소를 피벗 기준으로 재배치할 때 이동이 발생하며, 평균적으로 O(n log n)번의 이동이 발생
시간 복잡도는 매우 효율적이나 오버헤드의 발생가능성이 있다는 것이 -요소이다.

---------
1. Insertion sort
삽입 정렬은 정렬된 부분과 그렇지 않은 부분으로 나누어 정렬되지 않은 부분의 요소를 순차적으로 정렬된 부분에 삽입하는 방식으로 동작한다.
리스트의 제일 첫번째 요소는 정렬된 것으로 간주하고 수행한다.
두번째 요소부터 정렬된 부분의 올바른 위치에 삽입한다.

초기 리스트: [5, 2, 4, 6, 1, 3]
1. 첫 번째 요소는 이미 정렬된 것으로 간주합니다.
   [5] 2, 4, 6, 1, 3
2. 두 번째 요소 2를 정렬된 부분에 삽입합니다.
   [2, 5] 4, 6, 1, 3
3. 세 번째 요소 4를 정렬된 부분에 삽입합니다.
   [2, 4, 5] 6, 1, 3
4. 네 번째 요소 6을 정렬된 부분에 삽입합니다.
   [2, 4, 5, 6] 1, 3
5. 다섯 번째 요소 1을 정렬된 부분에 삽입합니다.
   [1, 2, 4, 5, 6] 3
6. 여섯 번째 요소 3을 정렬된 부분에 삽입합니다.
   [1, 2, 3, 4, 5, 6]

input: 리스트 A의 요소들 (셀 수 있는 요소들이어야한다.)
output: 재 정렬된 리스트 A
k는 1부터 n-1까지이다.

def insertion_sort(A):
  for k in range(1, len(A)):
      cur = A[k]
      j=k
      while j >0 and A[j-1] >cur:
        A[j] =A[j-1]
        j-=1
      A[j]=cur

시간복잡도 :  𝑂(𝑛^2)
최악의 경우 모든 리스트 요소를 훑어야한다.
각 요소는 자신의 위치까지 비교를 수행하며, 역순으로 정렬된 경우 
1+2+3+...+(n-1) 이를 정리하면 n(n-1)/2번의 비교 발생 정리하면 𝑂(𝑛^2)

--------
DnC 알고리즘의 종류

1. Merge-sort
주어진 리스트를 반으로 나누고 각 부분을 재귀적으로 정렬하고 정렬된 부분들을 다시 병합한다.
크게 분할, 정복, 병합 세가지 동작을 한다.
큰 문제를 작은 문제 여러개로 분할해서 해결한 뒤 다시 합친다.

더 구체적으로 나눠보면 
분할: 데이터를 두 부분으로 나눈다.
재귀: 분할 정복 알고리즘을 반복한다.
정복: 각 부분의 문제를 해결한 상태로 덩어리들을 합친다.
base case: 데이터의 크기가 0또는 1일때 분할을 멈추고 비교를 통해서 정렬한다.
시간 복잡도 : O(nlogn)
분할 과정에서 반으로 나누는데 O(logn)이 필요하고 병합과정에서 O(n)이 필요하기 때문이다.


How to merge S1, S2 into S?
def merge(S1,S2,S):
  i=j=0
  while i+j< len(S):
    if j==len(S2) or (i<len(S1) and S1[i] <S2[j]):
      S[i+j]=S1[i]
      i+=1
    else:
      S[i+j]=S2[j]
      j+=1

if j == len(S2) or (i < len(S1) and S1[i] < S2[j])에서는 두 가지 경우를 검사합니다.
j == len(S2): S2의 모든 요소를 합병했거나 더 이상 S2에서 가져올 요소가 없는 경우입니다.
i < len(S1) and S1[i] < S2[j]: S1[i]이 S2[j]보다 작거나 같은 경우입니다. 이 경우에는 S1[i]를 S[i+j]에 저장하고 i를 1 증가시킵니다.
여기서 병합도 같이 일어나고 있다.


def merge_sort(S):
  n=len(S)
  if n<2:
    return
  mid = n//2
  S1=S[0:mid]
  S2=S[mid:n]

  merge_sort(S1)
  merge_sort(S2)
  
  merge(S1,S2,S)

time per level : O(n)
height : O(logn)


3. Quick-sort

동작 방식
분할 : 리스트에서 하나의 요소를 피벗으로 선택한다.(보통 가장 앞 혹은 가장 뒤 요소)
정복 : 피벗으 기준으로 분할된 두개의 부분리스트에 대해 퀵정렬을 계속 적용한다.
합병 : 정렬된 부분 리스트는 추가 작업 없이 합쳐진다.

시간 복잡도 : 평균 -> O(nlogn)
최악의 경우 -> O(n^2) 
