알고리즘은 특정 시작 정점으로부터 모든 다른 정점까지의 최단 경로를 찾는 알고리즘입니다. 
이 알고리즘은 그래프가 연결되어 있고, 간선이 무방향이며, 간선의 가중치가 음수가 아닌 경우에 동작합니다. 
아래에서 다익스트라 알고리즘의 작동 방식과 관련된 기본 개념들을 자세히 설명하겠습니다.

기본 개념
거리(distance): 정점 v의 거리란, 시작 정점 s로부터 정점 v까지의 최단 경로의 길이입니다.

다익스트라 알고리즘: 시작 정점 s로부터 모든 다른 정점까지의 최단 거리를 계산하는 알고리즘입니다.

다익스트라 알고리즘의 가정
그래프는 연결되어 있다: 그래프의 모든 정점이 서로 연결되어 있어, 어떤 정점에서 다른 정점으로 가는 경로가 반드시 존재합니다.
간선은 무방향이다: 그래프의 간선은 양방향으로 이동할 수 있습니다. 즉, u와 v를 연결하는 간선이 있으면, u에서 v로도, v에서 u로도 이동할 수 있습니다.

간선의 가중치는 음수가 아니다: 간선의 가중치는 항상 0 또는 양의 값을 가집니다. 
음의 가중치가 있는 경우 다익스트라 알고리즘은 정확한 결과를 보장하지 않습니다.

다익스트라 알고리즘의 작동 방식
초기화:
시작 정점 s의 거리를 0으로 설정합니다.
나머지 모든 정점의 거리를 무한대로 설정합니다.
우선순위 큐를 사용하여 정점들을 관리합니다.

탐색 과정:
우선순위 큐에서 가장 작은 거리를 가진 정점을 꺼내서 현재 정점으로 설정합니다.(처음은 자기 자신)
현재 정점의 모든 인접 정점에 대해 거리를 계산하고, 만약 계산된 거리가 기존에 알려진 거리보다 짧으면 업데이트합니다.
업데이트된 정점을 다시 우선순위 큐에 추가합니다.

반복:
우선순위 큐가 빌 때까지 이 과정을 반복합니다.

결과:
시작 정점 s로부터 각 정점까지의 최단 거리를 반환합니다.

파이썬 코드 예제
def dijkstra(graph, start):
    # 시작 정점부터의 거리 초기화
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0
   
    # 우선순위 큐 초기화
    priority_queue = [(0, start)]
    
    while priority_queue:
        # 현재 가장 짧은 거리의 정점을 가져옴
        current_distance, current_vertex = heapq.heappop(priority_queue)
        
        # 이미 처리된 정점이라면 무시
        if current_distance > distances[current_vertex]:
            continue
        
        # 인접한 정점들의 거리 갱신
        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight
            
            # 더 짧은 경로를 찾았다면 거리 갱신하고 우선순위 큐에 삽입
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))
    
    return distances

# 예제 그래프: 딕셔너리로 표현 (인접 리스트)
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

# 시작 정점 'A'로부터 각 정점까지의 최단 거리 계산
distances = dijkstra(graph, 'A')
print("Shortest distances from A:", distances)

예제 설명
그래프 초기화: 인접 리스트 형태로 그래프를 표현합니다.
거리 초기화: 모든 정점의 거리를 무한대로 설정하고, 시작 정점의 거리를 0으로 설정합니다.
우선순위 큐 사용: heapq 모듈을 사용하여 우선순위 큐를 구현합니다.
반복 과정: 우선순위 큐에서 가장 작은 거리를 가진 정점을 선택하고, 인접한 정점들의 거리를 업데이트합니다.
최단 거리 출력: 시작 정점으로부터 각 정점까지의 최단 거리를 출력합니다.
이 알고리즘은 네트워크 라우팅, 길찾기 시스템 등 다양한 분야에서 최단 경로를 찾는 데 사용됩니다.


*최단거리를 출력하고 큐를 사용하는 것으로 보아 bfs임을 알 수 있다.

다익스트라 알고리즘을 설명할 때 흔히 사용하는 비유 중 하나는 "구름" 또는 "안개"가 퍼져나가는 것과 같은 방식으로 최단 경로를 확장하는 것입니다. 
이 비유를 사용하여 다익스트라 알고리즘을 설명하고, 주어진 예제를 통해 그 개념을 이해해보겠습니다.

구름 비유와 다익스트라 알고리즘
구름의 확장:
다익스트라 알고리즘은 특정 시작 정점에서 출발하여, 해당 정점으로부터 가장 가까운 정점들로 구름이 퍼져나가듯 최단 경로를 확장합니다.
처음에는 시작 정점만 구름에 포함됩니다.
이후 가장 가까운 인접 정점들을 차례로 구름에 추가하며, 그 정점들의 인접 정점들까지 최단 경로를 확장합니다.

지혜 (Wisdom):
다익스트라 알고리즘은 각 단계에서 현재까지 발견된 최단 경로 정보를 사용하여 효율적으로 경로를 확장합니다.
이미 구름에 포함된 정점들을 통해 새로운 정점들에 대한 최단 경로를 계산합니다.

Edge Relaxation (엣지 릴랙세이션)
엣지 릴랙세이션의 핵심 아이디어는 현재까지 알려진 최단 경로 정보를 사용하여 인접한 정점으로의 경로를 개선하는 것입니다. 다음과 같은 방식으로 동작합니다.

현재 상태:
u: 최근에 구름에 추가된 정점.
z: 아직 구름에 포함되지 않은 정점.
e=(u,z): 정점 
u와 정점 
z를 연결하는 간선.

릴랙세이션 조건:
현재 정점 u까지의 최단 경로는 이미 구름에 포함된 다른 정점들을 통해 계산된 최단 경로입니다.
z까지의 최단 경로는 u를 경유하여 갱신될 수 있습니다.

릴랙세이션 수행:
d(z): 시작 정점 s로부터 정점 z까지의 현재 알려진 최단 거리.
d(u): 시작 정점 s로부터 정점 u까지의 현재 알려진 최단 거리.
weight(e): 간선 e의 가중치.

엣지 릴랙세이션은 다음과 같이 이루어집니다:
d(z)←min{d(z),d(u)+weight(e)}
즉, 현재d(z) 값과 d(u)+weight(e) 값을 비교하여 더 작은 값을 d(z)에 저장합니다.



Recall: Priority Queue ADT (우선순위 큐에 관련한 고려사항)

• A priority queue stores a collection of entries
• Typically, an entry is a pair (key, value), where the key indicates the priority
• Main methods of the Priority Queue ADT
  • insert(e) inserts an entry e
  • removeMin() 
    removes the entry with smallest key

• Additional methods
  • min()
    returns, but does not
    remove, an entry with
    smallest key
  • size(), empty()


다익스트라 알고리즘을 구현할 때, 효율적으로 최단 거리를 찾기 위해 우선순위 큐를 사용합니다. 
이 우선순위 큐는 힙(heap) 구조로 구현되며, 각 정점의 거리 정보를 관리합니다. 
다익스트라 알고리즘에서 사용되는 우선순위 큐는 위치 정보를 포함한 적응형(priority queue)으로, 다음과 같은 개념과 작업이 포함됩니다:

힙 기반의 적응형 우선순위 큐
적응형 우선순위 큐 (Adaptable Priority Queue):

정점이 구름에 포함되지 않은 상태에서, 우선순위 큐를 사용하여 가장 작은 거리 값을 가진 정점을 효율적으로 찾습니다.
적응형 우선순위 큐는 삽입, 삭제, 키 변경 등의 작업을 효율적으로 수행할 수 있습니다.

위치 정보가 포함된 항목 (Location-aware Entries):
각 정점은 우선순위 큐에서의 위치 정보를 포함합니다. 이를 통해 정점의 거리 값이 변경될 때 효율적으로 업데이트할 수 있습니다.

키와 값 (Key and Value):
Key: 정점까지의 현재 최단 거리.
Value: 정점 자체.

다익스트라 알고리즘에서의 역할
초기화:
시작 정점의 거리는 0으로 설정되고, 나머지 모든 정점의 거리는 무한대로 초기화됩니다.
시작 정점부터 모든 정점을 우선순위 큐에 삽입합니다.

최소 거리 정점 선택:
현재 우선순위 큐에서 가장 작은 거리 값을 가진 정점을 꺼냅니다.
이 정점은 최단 경로가 확정되어 구름에 추가됩니다.

거리 값 갱신:
선택된 정점의 인접 정점들에 대해 엣지 릴랙세이션을 수행하여 거리 값을 갱신합니다.
거리 값이 갱신된 정점은 우선순위 큐에서의 키 값을 업데이트합니다.

구체적인 작업
replaceKey(l, k) 메서드:
이 메서드는 특정 항목 l의 키 값을 k로 변경합니다.
이 메서드를 사용하여 정점의 거리 값이 변경될 때 우선순위 큐에서의 위치를 조정합니다.

두 개의 레이블:
거리: 정점까지의 현재 최단 거리.

우선순위 큐 항목: 우선순위 큐에서 정점이 위치한 항목. 이를 통해 거리 값이 변경될 때 해당 항목을 효율적으로 업데이트할 수 있습니다.

가장 작은 거리 값을 가진 정점 선택:
우선순위 큐에서 현재 가장 작은 거리 값을 가진 정점을 선택하여 구름에 추가합니다.
이 정점과 연결된 인접 정점들의 거리 값을 엣지 릴랙세이션을 통해 갱신합니다.


구체적 코드
Q ← new heap-based priority queue
for all v ∈ G.vertices():
    if v = s
        v.setDistance(0)
    else
        v.setDistance(∞)
    l ← Q.insert(v.getDistance(), v)
    v.setEntry(l)
우선순위 큐 초기화:

Q는 heap-based 우선순위 큐로, 모든 그래프의 정점 v에 대해 초기화됩니다.
시작 정점 s의 거리를 0으로 설정하고, 다른 모든 정점의 거리를 무한대(또는 매우 큰 값)으로 초기화합니다.
각 정점 v는 우선순위 큐에 거리 값과 함께 삽입됩니다.

while ¬Q.empty():
    l ← Q.removeMin()
    u ← l.getValue() // 가장 가까운 노드를 가져옴
주 반복문 (Main Loop):

우선순위 큐 Q가 비어있지 않은 동안 반복합니다.
Q.removeMin()을 통해 현재까지에서 가장 작은 거리 값을 가진 정점 u를 선택합니다.

for all e ∈ u.incidentEdges():
    relax e
    z ← e.opposite(u)
    r ← u.getDistance() + e.weight()
    if r < z.getDistance():
        z.setDistance(r)
        Q.replaceKey(z.getEntry(), r)
릴랙세이션 (Relaxation):

선택된 정점 u와 그 정점에 인접한 모든 간선 e에 대해 relaxation을 수행합니다. 
각 간선 e에 대해 인접 정점 z의 거리 값을 갱신합니다.

relax e:
    z ← e.opposite(u)
    r ← u.getDistance() + e.weight()
    if r < z.getDistance():
        z.setDistance(r)
        Q.replaceKey(z.getEntry(), r)
Relaxation 함수 relax e:

각 간선 e=(u,z)에 대해, z의 현재 거리 값보다 u를 경유하여 계산된 새로운 거리 r이 더 작으면 z의 거리 값을 r로 업데이트하고, 우선순위 큐에서 z의 위치를 r로 변경합니다


다익스트라 알고리즘은 그리디 방법론에 기반하고 있어서 작동 원리가 중요합니다. 
이 알고리즘은 각 단계에서 현재까지 발견된 최단 경로를 기반으로 최소 거리를 가진 정점을 선택하여 진행합니다. 
이러한 방식으로 알고리즘은 시작 정점으로부터 모든 다른 정점까지의 최단 경로를 찾을 수 있습니다.

다익스트라 알고리즘의 작동 원리
그리디 방법론: 다익스트라 알고리즘은 각 단계에서 현재까지 발견된 최단 경로를 기준으로 다음 정점을 선택합니다. 
시작 정점에서 각 정점까지의 최단 경로를 구하기 위해 우선순위 큐를 사용하여 최소 거리를 가진 정점을 선택하고, 이 정점을 구름에 추가합니다.

정확성의 증명: 다익스트라 알고리즘은 최소 거리를 가진 정점을 선택하고 이를 통해 갱신된 경로를 발견합니다. 
만약 알고리즘이 모든 정점에 대해 최단 경로를 찾지 못한다면, 그 과정에서 첫 번째 잘못된 정점 F을 고려할 수 있습니다.

잘못된 정점 
F의 고려: 만약 F가 정확한 최단 경로가 아닌 잘못된 경로라고 가정하면, 이는 모순을 일으킵니다. 
왜냐하면 다익스트라 알고리즘은 그리디 방법을 사용하여 각 단계에서 최소 거리를 가진 정점을 선택하기 때문에, F가 잘못되었다면 그 전에 선택된 정점 D를 통해 F까지의 거리가 이미 올바르게 갱신되어 있어야 합니다.

거리 갱신의 정확성: 알고리즘이 
D까지의 거리를 정확하게 계산하고 (D,F) 간선을 통해 F의 거리를 갱신했다면, 
F의 거리 값 d(F)는 d(D)+weight(D,F)보다 크지 않아야 합니다. 그렇기 때문에
d(F)>d(D)인 경우 F의 거리 값이 틀릴 수 없습니다.

음수 가중치에 대한 문제
다익스트라 알고리즘은음수 가중치가 있는 경우에는 알고리즘이 제대로 작동하지 않을 수 있습니다. 
이는 그리디 방법론이 음수 가중치를 고려하지 않기 때문에 발생하는 문제입니다.
음수 가중치가 있는 경우 사이클을 계속해서 탐지하게 되어 잘못된 결과를 내놓을 수 있습니다.


Q ← new heap-based priority queue
for all v ∈ G.vertices():
    if v = s
        v.setDistance(0)
    else
        v.setDistance(∞)
    l ← Q.insert(v.getDistance(), v)
    v.setEntry(l)

우선순위 큐 초기화:

Q는 힙 기반의 우선순위 큐로, 모든 정점 
v에 대해 초기화됩니다.
시작 정점 
s의 거리를 0으로 설정하고, 다른 모든 정점의 거리를 무한대(또는 매우 큰 값)로 초기화합니다.
각 정점 
v은 우선순위 큐에 거리 값과 함께 삽입됩니다.

while ¬Q.empty():
    l ← Q.removeMin()
    u ← l.getValue() // 가장 가까운 노드를 가져옴

주 반복문 (Main Loop):

우선순위 큐 Q가 비어있지 않은 동안 반복합니다.
Q.removeMin()을 통해 현재까지에서 가장 작은 거리 값을 가진 정점 u를 선택합니다.

for all e ∈ u.incidentEdges():
    relax e
    z ← e.opposite(u)
    r ← u.getDistance() + e.weight()
    if r < z.getDistance():
        z.setDistance(r)
        Q.replaceKey(z.getEntry(), r)

릴랙세이션 (Relaxation):

선택된 정점 
u와 그 정점에 인접한 모든 간선 
e에 대해 relaxation을 수행합니다.
각 간선 
e에 대해 인접 정점 
z의 거리 값을 갱신합니다.

relax e:
    z ← e.opposite(u)
    r ← u.getDistance() + e.weight()
    if r < z.getDistance():
        z.setDistance(r)
        Q.replaceKey(z.getEntry(), r)

Relaxation 함수 relax e:

각 간선 
e=(u,z)에 대해, 
z의 현재 거리 값보다 
u를 경유하여 계산된 새로운 거리 
r이 더 작으면 
z의 거리 값을 
r로 업데이트하고, 우선순위 큐에서
z의 위치를 
r로 변경합니다.

