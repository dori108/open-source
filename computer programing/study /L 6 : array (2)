• Continue with the opening example in the last section
• In your class, you might have several courses for each student
• So we need several 1D arrays
• Alternatively, we can use a 2D array

1차원 배열의 배열 = 2차원 배

i n t main ()
{
f l o a t math [4 0 ] ;
f l o a t c [4 0 ];
f l o a t phi s [4 0 ];
f l o a t b i o [4 0 ];
. . .
}

각 수업마다 40명이 존재한다고 생각해봐
i n t main ()
{
float courses [ 4 0 ][4] ;
. . .
}


2D Array: declaration

type arrayName[row][column];
• Similar as 1D array, type is required
• “arrayName” should be unique
• “row” and “column” should be constant expressions

i n t main ()
{
float a [4 0 ][ 4 ] ; // there 40 rows and 4 columns in each row
a [3 ][2 ] = 3.14;
return 0;
}


2D Array: initialization

i n t main ()
{
float a [3 ][4 ] = {{ 1 ,3 ,1 ,1} ,{1 ,2 ,1 ,3} ,{1 ,12 ,1 ,2}} ;
return 0;
}

• Following way is also valid
i n t main ()
{
float a  [3 ][4 ] = {1 ,3 ,1 ,1 ,1 ,2 ,1 ,3 ,1 ,12 ,1 ,2};
return 0;
}
-> 이렇게되면 그냥 일차원배열 한개로 정의 되는거


i n t main ()
{
float a [][4 ] = {{ 1 ,3 ,1 ,1} ,{1 ,2 ,1 ,3} ,{1 ,12 ,1 ,2}} ;
return 0;
}
-> 행의 크기는 생략이 가능하다.

• Following way is also valid, row = [N/4] =3
이기 때문이다. 크기n에 나누기만 적절히 해주면 된다. 열로!

i n t main ()
{
float a  [4 ][ ] = {1 ,3 ,1 ,1 ,1 ,2 ,1 ,3 ,1 ,12 ,1 ,2};
return 0;
}

-> 이건 안된다!
• It is organized in row major order


2D Array: visit element of the array

i n t main ()
{
f l o a t  a [][4 ] = {1 ,3 ,1 ,1 ,1 ,2 ,1 ,3 ,1 ,12 ,1 ,2};
 i n t i = 0 , j = 0;
f or ( i = 0; i < 3; i ++){ 
f or ( j = 0; j < 4; j++){
p ri n t f ( ”%f ” , a [ i ][ j ]) ;
}
p ri n t f ( ” \n” ) ;
}
return 0;
}
-> f l o a t  a [][4 ] = {1 ,3 ,1 ,1 ,1 ,2 ,1 ,3 ,1 ,12 ,1 ,2}; 여기서 행은 생략했다.
그래도 괜찮아 다만 열은 생략하면 안된다. 이 상황에서는

Example-1: transpose a matrix -> 행렬 전치
• Given a 2D matrix, kept in a 1D array
• a[12] = {12,13,5,5,7,21,6,4,10,5,5,9} -> 1d로 저장하여 크기를 동적으로 변환할 수 있도록한다.
이렇게 해두고 for 문은 적절히 돌리면 동적으로 저장이 가능하다.

Example-1: transpose a matrix

• Given a 2D matrix, kept in a 1D array
• a[12] = {12,13,5,5,7,21,6,4,10,5,5,9}

• b[12] ={12,5,6,5,13,7,4,5,5,21,10,9}
1 A[i][j] -> B[j][i]
2 A[i][j] ⇒ a[i*c1+j], where c1=3
3 B[j][i] ⇒ b[j*c2+i], where c2=4
4 a[i*c1+j] b[j*c2+i]

이제 코드로 표현을 해본다면
#i nc l ud e < s t d i o . h>
i n t main () {
i n t  a [12 ] = {12 ,13 ,5 ,5 ,7 ,21 ,6 ,4 ,10 ,5 ,5 ,9};
i n t  b [12 ] = {0};
i n t  i = 0 , j = 0;
f o r ( i = 0; i < 4; i++){
f or ( j = 0; j < 3; j++){
b [ j ∗4+i ] = a [ i ∗3+j ] ; }}
 f o r ( i = 0; i < 3; i++){
f or ( j = 0; j < 4; j++){
p r i n t f ( ”%4d” , b [ i ∗4+j ]) ;
}
p ri n t f ( ” \n” ) ;
}
r et ur n 0;
}



• Now, we are going to discuss a special kind of array
• Array of chars, we give it a new name string
• Different from integer array, empty elements are set to ‘\0’
->빈(NULL)요소가 ‘\0’로 설정된다. 이것이 정수 배열과의 차이. 정수 배열에서는 0으로 들어갔잖아 여기서는 문자 처리가된다.

#i nc l ud e < s t d i o . h>
i n t main (){
char hi [8 ] ={ ’ h ’ , ’e’ , ’ l ’ , ’ o ’ }; -> 남은 3개 요소는 ‘\0’처리
i n t  i = 0;
f o r ( i < 8; i++){
p r i n t f ( ”%c” , hi[ i ]) ;
}
r et u r n 0;
}
Output : 
h el l o
 #i nc l ud e < s t d i o . h>
i n t main (){
char hi [8 ] ={ ’ h ’ , ’ e ’ , ’ l ’, ’ l ’ , ’ o ’ };
i n t  i = 0;
p r i n t f ( ”%s ” , hi ) ; -> NULL에 도착할 때 까지 문자열을 출력한다. 이렇게하면 for문을 사용하지 않아도 괜찮아.
r et ur n 0;
}
Output :
h el l o

결과가 같네
차이점이 있다면 위는 문자를 개별적으로 출력하고 (%c), 아래는 문자를 한번에 출력한다.(%s)

String: definition and initialization
• First of all, it is an array
• We can initialize it as an array

#i nc l ud e < s t d i o . h>
i n t main (){
char ch [6 ] = { ’H ’ , ’ e ’ , ’ l ’ , ’ l ’ , ’ o ’ , ’ \0 ’ };
char ch [] = { ’H ’ , ’ e ’ , ’ l ’ , ’ l ’ , ’ o ’ , ’ \0 ’ }; -> 이렇게 해두면 크기는 자동 결정
/∗we have 6 chars there∗/
char ch [6 ] = { ’H ’ , ’ e ’ , ’ l ’ , ’ l ’ , ’ o ’ };
/∗ ’ \ 0 ’ i s a u t o m a t i c a l l y appended ∗∗/
char ch [6 ] = {” H el l o ” }; -> ‘\0’ 자동 추가
c h a r ch [6 ] = ” H el l o ” ; -> ‘\0’ 자동 추가
c h a r ch [] = ” H el l o ” ; -> 마지막에 ‘\0’ 자동 추가하여 6의 크기를 할당한다. 여기서 ‘\0’는 문자열의 끝을 나타낸다. 
r et ur n 0;
}
-> char ch [5 ] = { ’H ’ , ’ e ’ , ’ l ’ , ’ l ’ , ’ o ’ }; 이건 가능하긴해 ‘\0’이 없기 때문에 문자열로 사용은 불가능해 나중에 출력될 때 자동생성되는 것일 뿐

String Operation: strcpy
• Copy one string to another
• strcpy(destine, source)
-> 문자열 복사함수, 복사될 대상, 복사할 원본 순서대로 작성한다.

#i nc l ud e < s t d i o . h>
#i nc l u d e < s t ri n g . h>
i n t main (){
char ch [1 0 ];
str c p y ( ch , ” hi ” ) ; 
p r i n t f ( ”%s \n” , ch ) ;
str c p y ( ch , ” ha” ) ;
p r i n t f ( ”%s \n” , ch ) ;
r et ur n 0;
}
복사하는 함수를 배웠다!
String Operation: strcmp
• Compare whether two strings are equal or not
두 문자가 같은지 다른지를 판별하고 결과를 나누게 되는데 먼저 마지막 글자가 일치하는 경우, 그 나음 앞 글자가 일치하는 경우, 마지막으로 모두 일치하는 경우로 나눠서 생각해보겠다.

#i nc l ud e < s t d i o . h>
#i nc l u d e < s t ri n g . h>
i n t main (){
char ch [1 0 ], ch2 [1 0 ];
str c p y ( ch , ” hi ” ) ;  // 마지막 글자인 i=105
str c p y ( ch2 , ” ha” ) ;  // 마지막 글자인 a =97
 i f ( strcmp ( ch , ch2 ) == 1) {
p r i n t f ( ” ch > ch2 \n” ) ; 
} el se  i f ( strcmp ( ch , ch2 )==−1){
		p r i n t f ( ” ch < ch2 \n” ) ;
}el s e  i f ( strcmp ( ch1 , ch2 )==0){
pr i n t f ( ” i d e n t i c a l ” ) ;}
r et ur n 0;
}
strcmp는 두 문자열의 각 문자를 순차적으로 비교하고 
예를 들어 
ch 와 ch2를 비교해
 ch < ch2 이면 양수 +1
 ch = ch2 이면 0
 ch > ch2 이면 음수 -1를 출력하게 된다.

#i nc l ud e < s t d i o . h>
#i nc l u d e < s t ri n g . h>
i n t main (){
char ch [1 0 ], ch2 [1 0 ];
str c p y ( ch , ” he ” ) ;  // 첫 글자인 h=104
str c p y ( ch2 , ” we” ) ;  // 첫 글자인 w =119
 i f ( strcmp ( ch , ch2 ) == 1) {
p r i n t f ( ” ch > ch2 \n” ) ; 
} el se  i f ( strcmp ( ch , ch2 )==−1){
		p r i n t f ( ” ch < ch2 \n” ) ;
}el s e  i f ( strcmp ( ch1 , ch2 )==0){
pr i n t f ( ” i d e n t i c a l ” ) ;}
r et ur n 0;
}
strcmp는 두 문자열의 각 문자를 순차적으로 비교하고 
ch 와 ch2를 비교해
 ch < ch2 이면 양수 +1
 ch = ch2 이면 0
 ch > ch2 이면 음수 -1를 출력하게 된다.

만약 두 글자가 모두 동일하다면? 0을 반환하게 되겠지 정확히 동일하면 0이니까

String Operation: strlen 
• Calculate the length of the string
• Pass the string until it encounters ‘\0’
-> 문자의 길이를 게산하는 함수 ‘\0’을 만날 때 까지 문자의 개수를 센다. 자동으로 생겨난다고 했으니

#i nc l ud e < s t d i o . h>
#i nc l u d e < s t ri n g . h>
i n t main (){
char a [20] = ” h el l o ” ; 
i n t  l = s t rl en ( a ) ; 
p r i n t f ( ” l en g t h i s : %d” , l ) ; 
r et ur n 0;
}
[length is: 5]
이런 방식으로 사용하는 것임

String Operation: strcat
• Concatenate two strings into one
-> 두 문자열을 연결하는 함수
a =a+b

#include <stdio.h>
#include <string.h>
int main(){
chsr a[20] = “hello ”;
chsr b[10] = “world ”;
printf(”a=%s\n” , a);
printf(”b=%s\n” , b);
strcat(a,b);
printf(”a=%s\n” , a);
return 0;
}

output:
hello
worid
hello world
한 킨 띄우는거 잊지마 원래 a는 한 칸 띄워져있음

Summary over string and char array
• Array of chars could be used as string, ‘\0’ should be appended at the end -> 문자열은 문자 배열로 표현되고, 배열 끝에 ‘\0’(null)이 있어야함
• One more byte should be reserved for ‘\0’->  ‘\0’(null)을 할당할 수 있도록 추가 바이트를 할당해준다.
• String can be used as an array of chars -> 문자배열로 문자열 사용
• Functions such as “strcpy”, “strlen”, “strcat” etc require string input

strcpy(str1,str2) ->str2를 str1으로 복사하고 str1은 덮어 씌여진다.
strlen(str1) -> 문자열의 길이 ‘\0’가 나타나기 전까지 문자들의 길이를 샌다.
strcat(str1,str2) -> str1과 str2의 값을 str1에 한번에 저장한다,
strstamp(str1,str2) -> 두 문자열을 비교해서 -1,0,1을 출력한다.






















