functions : declaration, definition and calling 

printf();
scanf();

->ops ->if-else ->loops ->array ->now!
이 과정을 잘 따라와야 좋은 점수를 받을 수 있을 것이다.

이런 함수들이 이제 우리가 알던 함수인거지
i n t  main ( .) ;
i n t  printf ( . .) ;
i n t  scanf ( .) ;
f l o a t  sqrt ( .) ;
f l o a t  floor ( .) ;
f l o a t  fabs ( .) ;

• They are actually comparable
• Function in C is more general
• We are going to learn to organize our codes into functions (blocks)

Advantages of function (1)
We are already familiar with functions

int main();
int printf();
int scanf();
float sqrt(); // 루트 함수, root
float floor(); //반 내림 -> -4.5 이면 -5로 처리된다. 반대는 float ceil();
float fabs(); // 절댓값 함수

main 함수의 출력 return 0; 함수의 결과를 결정한다. os 시스템에 return하고 실행하는 것.
return 1; : 뭔가 문제가 있는 상황인 것이다.

• 함수 사용의 Advantages
• No need to repeat others work (reinvent the wheel) // 다른 코드를 따라서 쓸 필요가 없다.
• No need to write things again and again
• Your codes become cleaner // 무엇보다 깔끔하게 코드 작성이 가능

Introdution of function 
simple example
#include < stdio . h>
void hi(int i){
  printf("hello %d\n", i);
}
int main(){
  int i=0;
  for(i=0;i<5;i++) -> hi에서 전송받아 수행하게 된다.
    hi(i);
  return 0;
}
• We call hi() inside main
• “main()” cannot be called by any other function

Declaration of function 
• Declare a function for n!
팩토리얼을 구해주는 함수

long fact(int i);
int main(){
  int i =5, f=0;
  f =fact(i);
  return 0;
}
주의 오류가 있는데 하나 찾아봐
• The name should be unique
• There should be input parameter(s) along with the types (함수 정의 시 입력 매개변수와 타입 명시)
• There should be output value type

long fact(int i);에서
long : return value type
fact : function name
int n : input parameters-> type name


float mult (int n, float b);
얘도 마찬가지로 
신기한건 return 값의 타입을 명시해주고 이와 다른 값이 리턴되면 오류가 뜬다는 것이다.

저 위의 함수를 실행시키면 오류가 나는데 무슨 이유일까?
error: undefined reference to ‘fact’
• “fact” has been declared, however not defined (implemented)
• There is no function body
• When you compile it, above error comes out
• Now, let’s think about how to implement fact()

그냥 함수 이름만 넣는다고 끝이면 안되고  
long func1(int n, int i)
{
....
return r;
}
이렇게 바디가 있어야지 안그러면 오류난다. 정의를 안하면 안된다는 의미.

• Now, let’s think about how to implement fact()
For i from n to 1 do: n에서부터 1까지 반복합니다.
r = r * i: r에 i를 곱합니다.
i --: i를 1씩 감소시킵니다.
End-for: 반복문 종료.
return r: r을 반환합니다.

Define a function (4): separate declaration from definition
함수 선언과 정의를 분리하는 것은 특히 C/C++와 같은 언어에서 중요하다. 함수 선언은 함수의 프로토타입을 명시하여 컴파일러에게 함수의 존재를 알리는 역할을 한다.
함수 정의는 실제 함수의 동작을 구현함. 이는 코드의 가독성을 높이고, 여러 소스 파일 간에 함수를 사용할 수 있도록 한다.
머리를 쓰는 것 = 선언
바디를 쓰는 것 = 정의 
long fact ( int i ) ;

int main ()
{
int i = 5;
long f = 0;
f = fact ( i ) ;
return 0;
}

long fact (int i )
{
  long n = 1;
  if ( i < 0)
    return 0;
  else if ( i == 0)
    return 1;
  else{
    while ( i >0){
      n = n∗i ;
      i −−;
      }
  }
  return n ;
}

Define a function (5): combine declaration with definition
함수의 프로토타입(선언)과 실제 구현(정의)을 하나의 코드 블록에 포함하는 것을 의미합니다. 

long fact (int i )
{
  long n = 1;
  if ( i < 0)
    return 0;
  else if ( i == 0)
    return 1;
  else{
    while ( i >0){
      n = n∗i ;
      i −−;
  }
  }
  return n ;
}

int main ()
{
int i = 5;
long f = 0;
f = fact ( i ) ;
return 0;
}


Example-1 : 원의 면적
• Define a function to calculate the area of a circle
• Arguments and Parameters should be matched
• Is there any problem in the following code?

float area(float r, float pi){
  float a=0;
  a=r*r*pi;
}
int main(){
  float r=1.5;
  const float pi =3.1415926;
  r=area(r,pi);
  return 0;
}

문제가 있어! return 문이 없으면 area 함수의 동작이 정의되지 않는다.
왜냐하면 float 값을 반환하도록 선언되었지만 실제로는 아무 것도 반환하지 않기 때문이다.

Example-2 : 펠린드롬 수 

int isPalindrome (int n)
{
  int b = n , r = 0;
  while ( b > 0) {
    r = r∗10+b%10;
    b = b / 10;
}
  i f ( n == r ) {
    return 1;
  }el s e {
    return 0;
  }
}
int main () {
  int a = 515;
  if (isPalindrome(a)) {
    printf ( "%d is a Palindrome number \n" , a ) ;
  }
  retuen 0;
}

Example-3: perfect number
• Define a function to jugde whether an integer is a perfect number
• Perfect number: number equals to the sum of all its factors
• 6 = 1 + 2 + 3
• Call it to output all the perfect numbers in range [2, 300]

주어진 범위 [2, 300] 내에서 모든 완전수(Perfect Number)를 출력하는 함수를 정의하는 방법
완전수는 자기 자신을 제외한 모든 양의 약수의 합이 자기 자신과 같은 수를 말한다.
주어진 숫자의 약수를 모두 찾기 > 모든 약수를 합산 > 주어진 숫자와 비교하여 동일한지 확인
이 과정에서 % 연산자를 많이 사용해야 한다. 약수를 이용해야하기 때문에 나눠서 약수들을 구하고 그 약수들을 더해서 원래 주어진 수랑 비교를 해야하기 때문이다.

int main(){
  for(int i =2; i<=300; i++){
    if(isperfect(1)){
      printf("%d",i)
    }
  }
}

int isperfect(int num){
  int sum = 0;
  for(int i =1; i<num;i++){
    if(num%i ==0){ // i는 num의 약수 
      sum+=i;
    }
  }
}
if(sum==num)
return 1;
else
return 0;

약수 계산 : 나머지 있어?! 없어?! 확인하면 된다 이제

Example-4: Armstrong number 
• Define a function to check whether a number is Amstrong number
• For one digits: 1^1 = 1
• For three digits: 1^3 + 5^3+3^3 = 153
• For four digits: 1^4 + 6^4 + 3^4 + 4^4 = 1634

int count_digit(int num);
int isArmstrong(int num){
  d=count_digit(num);
  while{
    digit ...
    sum+=pow(digit,d);
  }
}

• Princeples in function definition
1 Remember return type, if there is no need, put void -> void 함수이면 return ;이렇게 처리한다. return타입이 필요 없는 경우 printf문이라던지
2 Give a unique and self-telling name to your function
3 Define function first, then you can call it (just as variable in C)
4 Parameters along with the type appear in pair
5 Parameters are transferred by value

c에서는 특이하게도 함수 정의를 먼저 하고 이후에 호출을 해야만 한다는 특징이 있다.

long fact(int i){
r = 1;
while(i > 0)
…
return r;
}

int main()
{
int a = 5, r =0;
r = fact(a);
}


Parameter Transfer
변수들은 주소를 가져와서 쓰는 것이 아니라 그 값 자체를 복사해서 가져다가 쓰는 것이다.
• Given integers a and b
• You are required to swap their values
• For example, a = 5, b = 8
• After swapping, it becomes a = 8, b = 5

int main(){
  int a=5,b=8;
  int tmp;
  printf("a = %d, b = %d\n",a,b);
  tmp=a; a=b;
  b=tmp;
  printf ( "a = %d, b = %d\n" , a , b ) ;
  return 0;
}

• Now, let’s do it by a function
#include<stdio.h>
void swap(int a, int b){
  int tmp =a;
a=b; b=tmp;
return ;
}

int main(){
int a=5,b=8;
printf("a = %d, b = %d\n",a,b); //5,8
swap(a,b);
printf("a = %d, b = %d\n",a,b); //5,8
}

주의해야 할 점은 swap 함수가 값을 전달받는 것이 아니라 값의 복사본을 받기 때문에 원래 변수에는 영향을 미치지 않는다.
원래 값인 a,b는 무슨 일을 하더라도 그대로 유지되는거야.

Function Calling again
• Function can be called in a cascaded manner
• ‘main’ cannot be called
• Functions are not necessarily called by ‘main’ directly
'main'은 호출할 수 없다. 'main' 함수는 프로그램이 실행될 때 시스템에 의해 호출.

float calc (int n , float a ,short int c){
  return ( a∗a∗n+c) ;
}
int main (){
  int n = 2;
  short int w = 4;
  float x = 4.12 , r = 0;
  r = 3∗c al c ( n , x , w) ;
  return 0;
}
