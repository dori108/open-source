1D array

a:1 2 4
b:2 3 5 7
a와 b를 u에 복사하면 

u:1 2 4 3 5 7 
일단 a의 요소를 모두 복사하고 그 다음 이중 for문을 이용하여 a와 b를 비교하여 같지 않은 요소를 추가한다.
+ 버블 sort를 이용한다.

x sort
i = 0, j = 0, k = 0;

while(1){
  if (a[i] < b[j])
    u[]k=a[i];
    i++
  
  if else (a[i] > b[j])
    u[]k=b[j];
    j++
  k++
}


• Given we have following problem -> 수업에 10명의 학생이 있고 그들의 수학과목 총합, 평균, 최대/최소 점수를 구하길 원
• We have 10 students in the class
• We want to get average/sum/max/min score of their math course
• We also want to rank the scores
• Based on what we learned
• We should keep 10 variables of the same type
• How about we have 100 students?? -> 보다 더 많다면? 어쩔거야


#include < s t d i o . h>
void main ()
{
f l o a t x1 , x2 , x3 , x4 , x5 , x6 , x7 , x8 , x9 , x10 ;
-> 4*10 bytes, 변수의 이름이 모두 다르다.(문제가 되는 부분) 변수가 10개 필요함 변수 하나당 하나의 정보가 담기기 때문
-> 배열을 사용하면 변수이름은 통일해줄 수 있음 > 한 문제는 해결
f l o a t sum = 0 , avg = 0;
scanf ( ”%f ” , &x1 ) ;
sum += x1 ;
scanf ( ”%f ” , &x2 ) ;
sum += x2 ;
. . .
avg = sum/ 10;
}

그래서 일련의 변수들 덩어리인 array가 필요한 것


1D Array: declaration

• 1D array is defined in the following form

type arrayName[size];
-> 유형 배열명 배열사이즈 순서대로 
• type could be any type defined in C, e.g. int, float,... -> 모두가능
• “arrayName” should be unique -> 변수이름과같은 규칙은 있음 (숫자 시작 안된다. 영어 숫자 _로 구성)
• It is actually a variable/constant, so rules to other variables/constants apply too -> 실제 변수, 상수이므로 이에대한 규칙이 적용된다.
• “size” should be an integer or an integer constant greater than 0 -> const는 가능하다.(사이즈가 항상 일정히 유지되기 때문이다.) 항상 크기는 정수이거나 상수(size>=1),변수 x
int a [0 ]; // meaningless, and not OK

i n t main ()
{
f l o a t x [4 0 ];
. . . .
return 0;
}
//가능

i n t main ()
{
const int N = 40;
f l o a t x [N ];
. . . .
return 0;
}
//가능

i n t main ()
{
i n t N = 40;
f l o a t x [N ];
. . . .
return 0;
}
//불가능(int -> float 가변적이기 때문에)


-> 매크로는 대체될 수 있음 그래서 컴파일 될 때 N이 아닌 40이 들어가게 된다.

#define N 40
i n t main ()
{
f l o a t x [N ];
. . . .
return 0;
}
//
i n t main ()
{
c onst i n t N = 40;
f l o a t x [N ];
. . . .
return 0;
}
//
#define N 40
i n t main ()
{
f l o a t x [3∗N];
. . . .
return 0;
}
// 3개 모두 가능


1D Array: visit array element

• Element in an array is visited/accessed by the subscript
or, index
• Subscript starts from ‘0’ to ‘N-1’ -> c 언어에서만
• For example, visit the 3rd element of x[N], we write “x[2]” -> 얘는 3번째 요소지? 0,1,2


#includ e < s t d i o . h>
i n t main ()
{
f l o a t x [4 0 ];
x [0 ] = 5 . 0;
x [2 ] = 3 . 1;
->각 인덱스의 위치를 나타내고 있지? x는 그냥 배열의 이름이야. 인덱스는 반드시 필요해 그래야 특정 수를 가져오지. 
그리고 일반 변수처럼 사용할 수 있음
p r i n t f ( ” x [0 ] = %f ” , x [0 ]) ;
return 0;
}

변수는 
int a;
a=20;

예
float x[10];
x=2;
-> 문제발생


i n t main ()
{
f l o a t x [4 0 ];
int i = 0;
for ( i = 0; i < 40; i++)
{
p r i n t f ( ” Input %d: ” , i ) ;
/∗−−be c a r ef u l below−−∗/
scanf ( ”%f ” , &( x [ i ]) ) ;
}
return 0;
}
-> 배열의 모든 위치에 입력을 받고있다.

if x[40]을 출력하거나 음수 인덱스를 출력하면 충돌
할당되지 않았기 때문이다.

• You are not allowed to use subscript beyond 39
• You invade other’s territory!!
39이상은 다른 영역 침범과 같다.


1D Array: how array looks like

• The system opens a continuous memory block for an array
• Actual size depends on both the type and length of an array

x[n]의 주소가 구해보고 싶으면
x의 주소 + n*(type의 byte)

x[n]의 사이즈는
n*(type의 byte)

#include < s t d i o . h>
int main ()
{
int a [10] , b = 3;
char c [1 0 ];
p r i n t f ( ” a : %d\n” , s i z eo f ( a) ) ;
p r i n t f ( ”b : %d\n” , s i z eo f ( b ) ) ;
p r i n t f ( ” c : %d\n” , s i z eo f ( c ) ) ;
return 0;
}

output:
a:40
b:4
c:10
•The system opens a continuous memory block for an array
•Actual size depends on both the type and length of an array


1D Array: initialization

• No initialization, what happens
[1: local]
#include < s t d i o . h>
int main ()
{
int a [10];
int i =0;
for(; i<10; i++)
p r i n t f ( ”%d” ,a[i] ) ;
return 0;
}
[2: static] ->얘는 메인 호출 때 만들어지고 프로그램 종료까지 계속 남아있다. 자동으로 배열이 0으로 초기화되는 애다.
#include < s t d i o . h>
int main ()
{
staic int a [10];
int i =0;
for(; i<10; i++)
p r i n t f ( ”%d” ,a[i] ) ;
return 0;
}
[3: external]
#include < s t d i o . h>
extern int a [10]; -> 전역 변수이다.
int main ()
{
int i =0;
for(; i<10; i++)
p r i n t f ( ”%d” ,a[i] ) ;
return 0;
}

int a:선언
int a = 3: 초기화


1 Initialize to strange numbers -> 의미없는 
2 Initialize to zeros -> 일반적인 변수도 0으로 초기화한다.
3 Initialize to zeros -> 0으로 초기화

• Initializations as follows are valid

#include < s t d i o . h>
int main ()
{
int a [10] ={3,2,5,1};
int i =0;
for(; i<10; i++)
p r i n t f ( ”%d” ,a[i] ) ;
return 0;
}
-> int a[10] = {0} //0으로 초기화

#include < s t d i o . h>
int main ()
{
int a [] ={3,2,5,1}; -> 사이즈가 없었다가 뒤에서 4개를 할당해줘야하는구나! 하고 알고 정보 가져옴옴
int i =0;
for(; i<4; i++)
p r i n t f ( ”%d” ,a[i] ) ;
return 0;
}

//int a[]; 만 나왔으면 장소할당이 안되었기에 안된다.

• Initializations as follows are invalid

#include < s t d i o . h>
int main ()
{
int a [10] ={3,2,5,1}; -> 초기화 시키고만 사용이 가능하다.
int i =0;
for(; i<10; i++)
p r i n t f ( ”%d” ,a[i] ) ;
return 0;
}

#include < s t d i o . h>
int main ()
{
int a ={3,2,5,1}; -> 변수 하나만 할당이 가능하다.
int i =0;
for(; i<10; i++)
p r i n t f ( ”%d” ,a[i] ) ;
return 0;
}


1D Array Example-1

• Given an array: a[10] = {3, 21, 5, 8, 5,11, 22,14,9,51}
• Flip the array to: {51, 9, 14, 22, 11, 5, 8, 5, 21, 3}

두가지 방법이 있음
1. 새로운 배열이용
int b[10];
for (int i =0; i<10;i++){
  b[i]=a[10-i-1]
}

2. a[10]만 이용 (temp)
//for (int i =0; i<10;i++){ -> 이렇게 하면 안된다. 다시 반복해서 원래 상태로 복귀하게 되기 때문 
사이즈의 반값을 가져야한다. int이기 때문에 계산 값이 나누어 떨어지던 말던 상관없음 -> 
for (int =0; i<5;i++){

  int temp =a[i];
  a[i]=a[10-i-1];
  a[10-i-1]=temp;
}

• The idea is that, we only need to swap two elements each time
• One for the header, one from the rear
• We do this for 10/2 times

1 For i from 0 to N do 2
2 Exchange a[i] with a[N-i-1] -> 인덱스 수를 더하면 항상 9 !
3 End-for

#include <stdio.h>
int main(){
  int a[10]={3,21,5,3,55,24,21,43,6}
  int t=0, i=0;
  for (; i<5;i++){ 
    t =a[i];
    a[i]=a[10-i-1];
    a[10-i-1]=t;
  }
  for(i=0;i<10;i++){
    printf("%d ",a[i]);
  }
  return 0;
}


1D Array Example-2

• Given a sorted array: a[7] = {3, 14, 15, 18, 22,35}
• Insert an input number to the array -> x=16;
• Keep the array sorted after the insertion

1.들어갈 자리 찾기
int j =0;
for (j=0; i<N; j++){
  if(a[j]>x) break;
} //j=들어갈자리 
-> N은 배열의 크기

2.들어갈 자리 비워주기
shift_right(a,j);
-> 따로 함수를 만들어서 참조하는거야

void shift_right(int a[], int j){
  for(k=n-1; k>j;k--){
    a[k]=a[k-1];
  }return;
}

3.자리에 넣기
a[j]=x;

a의 값들을b에 복사하는건데 
변수를 복사해서 사용하는 것이고
배열은 그 크기가 같은것을 가르키며 사용한다.
우리는 주소만 옮겨주면 되는거야


1D Array Example-3

• Given an array: a[10] = {21, 3, 5, 8, 5,11, 22,14,51,9}
• Sort the array in ascending order: {3, 5, 5, 8, 9, 11, 14, 21, 22, 51}

버블 sort 이용
for(k=0; k<n-1;k++){
  for(i=0; i<n-k-1; i++){
    if(a[i]=a[i+1])
    //swap a[i] change a[i+1];
  }
}

• The idea is bubble sort, which is a classic method for sorting
• Each time, we move the largest to the rear of the array
• Repeat this on sub-array for N times

**about bubble sort ..!!
more information needed

• Let’s now outline the procedure
1 For i from 0 to N do -> n-1까지
2 For j from 0 to N-i do -> n-k-i까
3 Check a[j] and a[j+1]
4 If a[j] > a[j+1]
5 swap them
6 End-if
7 End-for(j)
8 End-for(i)

#i nc l ud e < s t d i o . h>
i n t main ()
{
  int a [10] = {3 , 5 , 5 , 8 , 9 , 11 , 14 , 21 , 22 , 51};
  int i = 0 , j = 0 , t = 0;
  for ( i = 0; i < 10; i ++) {
    for ( j = 0; j < (10− i −1); j++) {
      if ( a [ j ] > a [ j +1]){
        t = a [ j ] ;
        a [ j ] = a [ j + 1];
        a [ j +1] = t ;
      }// i f ( a [ j ])
    }// f o r ( j )
  }// f or ( i )
  for ( i = 0; i < 10; i ++) {
    p r i n t f ( ”%d ” , a [ i ]) ;
  }
  return 0;
}





