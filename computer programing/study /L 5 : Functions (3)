Visibility and Life-cycle of Variables 
-> 암스트롱 수가 예시이다.
armstrong(){
  int a;
}
main 위에 위치하니까 전역변수이네?
int main(){

}

• We take something for granted before
• Now we study them in detail


1 Could we use the same variable name in different functions? ->다른 함수에서 동일한 변수 이름을 사용할 수 있습니다.
int func 1 (int n){
  int r = 3 , a = 1;
  return (r ∗n+a) ;
  }
float func 2 (int n , float a){
  float r = 1;
  int i = 0;
  for ( i = 0; i < n ; i++){
    r = r ∗a;
  }
  return r ;
}

• The visibility is inside function only -> 함수 안에서 선언/ 그 함수에서만 사용할 수있어서 
• It is born when the function is called
• It dies when calling is done

2 Could we use the same variable name in the same functions? ->동일한 함수 내에서도 동일한 이름의 변수를 사용할 수 있습니다. 그러나 이 변수들은 서로 다른 범위(scope)를 가지며, 각각의 범위에서는 독립적으로 존재합니다.
float func 2 (int n , float a){
  float r = 1;
  int r = 0;
  int i = 0;
  float i = 0;
  for ( i = 0; i < n ; i ++, r++){
    r = r ∗a;
  }
  return r ;
}

• The answer is No
• Codes on the left cannot pass the compilation
• Basically, it is ambiguous
• Imagine there are two Li Mins in your class

3 Could different functions share the same variable? ->일반적으로 다른 함수는 서로의 변수를 공유하지 않습니다. 각 함수는 고유한 스택 프레임(stack frame)을 가지며, 그 안에 로컬 변수를 포함합니다. 따라서 다른 함수는 서로의 로컬 변수에 접근할 수 없습니다.
int x,y;
void swap(){
  int t;
  t=x;x=y,y=t;
  return ;
}
int main(){
  x=3,y=5;
  swap();
  printf("x= %d\n",x);
  printf("y= %d\n",y);
  return 0;
}
-> 얘는 교환이 가능하다.

The answer is Yes
They are called global variables -> 함수 선언 모든 함수 다 접속, 이용 가능
They are visible to all functions in this file
They are defined outside of functions
They are born when “main” is called
They die when calling of “main” complete


#include <stdio . h>
void swap (int a , int b ){
  int tmp = a ;
  a = b ; b = tmp ;
  return ;
}
int main (){
  int a = 5 , b = 8;
  swap ( a , b) ;
  printf ( ” a = %d, b = %d” , a , b) ;
  return 0;
}
-> 교환이 안된다.

4 When a variable is born, when it dies?? -> 변수는 해당 변수가 정의된 블록(scope) 내에서 생성되고 소멸됩니다.

int incr ( int a ){
  static int x = 3;
  x = x + a ; 
  // p r i n t f (” x = %d\n ” , x ) ;
  return x ;
}
int main (){
  int i = 0 , a = 0;
  for ( i = 0; i < 4; i++){
  a = incr ( i ) ;
  printf ( ” a = %d\n” , a ) ;
  }
  return 0;
}
-> 함수가 리턴 되어도 x의 멤리는 그대로 남아있는다.

When you put “static” before a local variable
Its life-cycle becomes as long as global variable
It is born when “main” is called
It dies when calling of “main” complete
However, it is only visible within the function

수명(Life-cycle): "static" 키워드가 있는 로컬 변수의 수명은 프로그램이 실행될 때 시작하여 프로그램이 종료될 때까지 -> 이는 전역 변수와 같은 수명을 갖는다.
생성과 소멸: "main" 함수가 호출되기 전에 "static" 변수는 이미 생성되어 있습니다. 이 변수는 "main" 함수가 호출될 때 초기화됩니다. "main" 함수가 종료될 때까지 "static" 변수는 유지되며, 프로그램이 종료될 때까지 메모리에 남아 있습니다.
가시성(Visibility): "static" 변수는 선언된 함수 내에서만 볼 수 있습니다. 다른 함수에서는 직접적으로 접근할 수 없습니다.

if static이 있다면?
a=3
a=4
a=5
a=6
x=3 고정에 +i 씩만 

if static이 없다면?
a=3
a=4
a=6
a=9
앞변수에 +i 씩만 


Visibility and Life-cycle of Variables
테이블체크하기 (안되는거 확인해보기)

• It is NOT recommended to use global variables
• Advantage: you can transfer value easily
• Darkside
->You do NOT know where they have been changed
->Hard to debug your code
->Your code will be very messy!!!
