struct: initialize variable of composite type

• Each member in the composite type variable is treated as a variable
• They are visited via “var.member1”
-> var.member1에서 var는 변수명

s t r u c t STD {
char stdNm [64];
char stdNb [11];
int age ;
char gender [5];
};
-> 여기있는 애들은 일반 변수가 아니라 멤버야
즉, 독립적으로 사용이 불가해


int main ()
{
struct STD record ; -> 변수명을 선언해주네 record 라고 말이야
strcpy ( record.stdNm , ”Min Li ”); Min Li를 record.stdNm 얘가 가져오게 되고
strcpy ( record.stdNb , ”11201522031” ); 11201522031를 record.stdNb 얘가 가져오게 된다.
record . age = 20;
strcpy ( record.gender , ”male” ) ;
 }
-> 이렇게 변수를 선언해주고 가져와서 사용한다면, 할당된 값이 존재한다면 이제 그때부터 스트럭트의 각 멤버는 독립적으로 사용될 수 있다.
어떤 그룹에 속했는지 명시가 필요! struct STD record 이렇게

예시 1

Build a struct type for date (Year, month and day) 알짜에 주목한다
• Work out which day it is of the year

1 We need struct type to keep date inform
2 We need to calculate which day of the year is
3 It depends on year (whether it is a leap year)
4 Depends on the month
5 Depends on the date

이걸 어떻게 구조체로 만들거야?
struct Date {
int year ;
int month_day;
};
이렇게!

예시 2

struct DATE { -> 여기서 스트럭트가 정의되네
int day , month , year ;
};

int main ()
{
struct DATE date ; -> 여기서 스트럭트의 변수가 정의되고 어떤 변수가 어떤 스트럭트 정의 변수(?)와 연결될 것인지 정해진다.
int dyMonth []= {31 ,28 ,31 ,30 ,31 ,30 ,31 ,31 ,30 ,31 ,30 ,31};
int i = 1 , dayth = 0;

printf ( ” Year : ” ) ;
scanf ( ”%d” , &date . year ) ;
printf ( ” M onth : ” ) ;
scanf ( ”%d” , &date . month) ;
printf ( ” Day : ” ) ;
scanf ( ”%d” , &date . day ) ;


if ( isLeap ( date . year ) )
{
dayth += 1;
}
for ( ; i <date . month ; i ++)
{
dayth+= dyMonth [i − 1];
}
dayth += date . day ;
return 0;
}

이 예시에는 Two mistakes!!
1. 컴파일 오류 : isLeap ( date . year )이게 뭔지 확인할 수가 없어
2. bug : 3월부터 확인이 가능하잖아 > 1,2월 체크가 있는 경우 버그가 뜬다 

다음과 같이 바꿔주면 된다

struct DATE {
int day , month , year ;
};
int isLeap (int year)
{ if (year%4==0) {
if (year%400==0){
return 1;
} else if (year%100=0){
return 0;
}
return 1;
} else {
return 0;
}/ / end− i f − el se
}/ / end−i sL eap

int main ()
{
struct DATE date ; -> 여기서 스트럭트의 변수가 정의되고 어떤 변수가 어떤 스트럭트 정의 변수(?)와 연결될 것인지 정해진다.
int dyMonth []= {31 ,28 ,31 ,30 ,31 ,30 ,31 ,31 ,30 ,31 ,30 ,31};
int i = 1 , dayth = 0;

printf ( ” Year : ” ) ;
scanf ( ”%d” , &date . year ) ;
printf ( ” M onth : ” ) ;
scanf ( ”%d” , &date . month) ;
printf ( ” Day : ” ) ;
scanf ( ”%d” , &date . day ) ;

if ( isLeap ( date . year ) &&date. month>2)
{
dayth += 1;
}
for ( ; i <date . month ; i ++)
{
dayth+= dyMonth [i − 1];
}
dayth += date . day ;
return 0;
}



struct: size of the struct type
• Now let’s consider another problem
• What is the size (bytes occupied) of struct type variable

s t r u c t DATE {
i n t day , month , year ;
};

s t r u c t STD{
char Name[1 0 ]; -> 12 byte를 할당
i n t age ; -> 4 byte를 할당
char gender [6 ]; -> 8 byte를 할당
};

i n t main ()
{
p r i n t f ( ”%d\n” , s i z eo f (s t r uc t DATE) ) ;
p r i n t f ( ”%d\n” , s i z eo f (s t r uc t STD) ) ;
r et ur n 0;
}

[Output]
12 -> int 3개 4+4+4
24 -> 10+4+6 =20, 20보다 크게 설정된다

왜 그렇게?
•Now let’s consider another problem
• What is the size (bytes occupied) of struct type variable
-> 메모리 할당을 편하게 하기 위해서 그냥 자동으로 추가 할당을 해주는 것이다.


struct example: complex number

• Given two complex number a = 2+3i and b = 4-i
• You are asked to define a struct of Complex
• Fulfill c = a+b

이것을 바탕으로 아래 같은 스트럭트 정의가 나오는 것
struct Complex{
int real, im;
};

예 2
Define the struct
struct Complex {
  float real , im ;
};

예 3
struct Complex {
float real , im ;
};

struct Complex add (struct Complex a , struct Complex b) {
// fill by your self
struct Complexc;
c.real = a.real + b.real;
c.im= a.im+ b.im;
return c;
}


예 4
struct Complex {
float real , im ;
};

struct Complex add (struct Complex a , struct Complex b) {
struct Complex c ;

c.real = a.real + b.real;
c.im= a.im+ b.im;
return c;
}

i n t main () {
struct Complex a = {2 ,3} , c ;
struct Complex b = {4, − 1};
c = add ( a , b) ;
p r i n t f ( ” c = %f + %f i ” , c . r eal , c . im ) ;
return 0;
}

-> int a = 4

in main
a = 2=3
b = 4-1


struct: typedef to save code

• In “struct STD”, “struct” has been repeated everywhere
• We can use “typedef” to save up our typing
-> 여기서 typedef는 마치 매크로처럼 대체가 된다.

s t r u c t DATE {
i n t day , month , year ;
};

s t r u c t STD{
char Name[1 0 ]; -> 12 byte를 할당
i n t age ; -> 4 byte를 할당
char gender [6 ]; -> 8 byte를 할당
};

typedef s t r u c t STD StdType ; -> s t r u c t STD대신 StdType를 쓰겠다는 의미
typedef s t r u c t DATE DatType ; -> s t r u c t DATE대신 DatType를 쓰겠다는 의미

함수를 사용하는 것 처럼 길게 정의해놓고 가져와서 쓸 떄는 귀찮으니까 대체해서 사용하겠다고 하는 것이다.

i n t main ()
{
DatType date ;
StdType std ;

p r i n t f ( ”%d\n” , s i z eo f (DatType) ) ;
. . .
}

아래와 같은 세가지 버전 모두로 쓸 수 있다.

typedef struct STDSTD;
typedef struct STD{
} STD;
typedef struct {
} STD;

• During compiling stage HUFS CSE C Programming
• “StdType” is replaced by “struct STD”
• You can apply typedef to any type

# include <s t d i o . h>
typedef unsigned i n t uint ; ->이것도 가능하다.

int main ()
{
uint a = 32768;
p r i n t f ( ”%d\n” , a ) ;
p r i n t f ( ”%d\n” , sizeof ( uint ) ) ;
return 0;
}

• During compiling stage
• “uint” is replaced by “unsigned int”
• You actually give a nickname to the type by typedef
