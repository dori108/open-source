10.2 예외 및 예외처리

예외: 심각하지 않은 오류 혹은 비정상적 상황

예외가 발생하면 이를 처리하고 프로그램이 정상 작동하도록 해야한다.
보통 발생된 예외를 처리하지 못하면 프로그램은 종료한다.
따라서 안전한 실행을 위해 예외처리는 중요하다.

예외 정의 : 프로그래머가 새로운 예외를 정의할 수 있는 기능
예외 발생 : 예외를 발생시킬 수 있는 문장
예외 처리 : 발생된 예외를 처리하기 위한 문장

예외처리모델
예외 처리와 그 후의 흐름을 확인한다.
try{}
catch{}
구문 : try에서 예외가 발생하면 catch에서 예외를 처리한다.

재개모델 : 예외가 발생하면 발생 지점으로 돌아가서 예외 처리를 하고 그 곳에서 재개한다.
종료모델 : 예외가 발생하면 예외를 처리하고 발생지점으로 가지 않고 try문을 종료해버린다. 다음 문장으로 넘어간다.

예외를 해결하지 못하는 경우 catch문을 수행하지 못하고 넘어가 버린다.
종료모델이 우수하다.

언어 s의 예외

1. exc : 얘로 시작하는 선언은 새로운 예외이름을 정의하는 기능으로 마치 전역 변수를 선언하는 것과 같다. 특정한 예외 상황을 부르는 말이다.
ex) exc id
2. raise : 어떤 특정한 상황에서 해당 예외를 발생시키는 문장이다. 발생 예외 처리 불가시 프로그램 종료
ex) raise id
3. try-catch : try실행 중 발생한 문장의 예외를 catch에서 처리한다. 발생된 예외이름과 처리한 예외이름이 같으면 두번째문장을 실행하여 예외를 처리한다.
ex) tey <stmt> catch (id) <stmt>
4. 함수 내에서 발생한 예외는 함수 내에서 처리되어야한다. 처리 불가시 프로그램은 종료된다.

어떤 문장 S1을 실행할 때 발생할 수 있는 예외의 종류에 따라 다르게 처리한다면 catch 절을 사용하는게 좋다.

try
  S1
catch(E1) S2
catch(E2) S3

이런식으로  catch 절이 두개있는 문장은 사실 다음과 같이 try문을 중첩하여 작성할 수 있으며 이것에 대한 일종을 설탕 구문이라고 할 수 있다.
try블록에는 어떤 문장도 들어올 수 있기 때문에 try 블록 내에 또 try블록이 올 수 있다.

try
  try
    S1
  catch(E1) S2
catch(E2) S3

10.2 python 예외

발생한 예외를 처리하려면 다음과 같이 try 절에 실행코드,catch절에 예외처리코드를 넣어두면 된다.
 try
    실행코드
except 
  예외처리코드
















요약
재개 모델 : 예외가 발생하면 예외처리 후 예외를 발생시킨 코드로 재개하여 계속 실행한다.
종료 모델 : 예외가 발생하면 예외 처리 후 예외를 발생시킨 코드로 재개하지 않고 try문을 끝내고 다음문장을 실행한다.

예외전파 : 호출된 함수에서 발생한 예외는 그 함수 내에서 처리되지 않으면 호출의 역순으로 처리될 때까지 호출자 함수에게 전파
java 컴파일러는 예외 검사를 통해 어떤 메소드 안에서 발생 가능한 예외가 해당 메소드 내에서 처리 가능한지 아닌지 아니면 메소드 헤더에 선언되었는지 검사한다.
검사 예외 : 예외가 발생한 경우 이를 처리할 수있는 처리문이 있는지 컴파일러가 미리 검사하는 예외
runtimeExpectation을 제외한 모든 예외는 모두 검사 예외이다.
메소드 내에서 처리되지 않는 예외는 메소드 헤더 부분에 throws를 이용하여 선언되어야한다.
