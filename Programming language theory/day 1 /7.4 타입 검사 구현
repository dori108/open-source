대입문의 타입 검사
대입문은 오름쪽, 왼쪽의 타입이 같아야한다.
결과 타입은 void여야한다.
왼쪽 변수의 타입은 타입 환경에서 찾고 오른쪽은 검사하면서 확인한다.
환경에서 설정이 되어있어야 그 타입으로 인식하고 나중에 검사를 돌릴 수 있다.

복합문의 타입검사
복합문에서 앞 문장은 반드시 void 문장이어야하고 그 뒤에 return이 와야한다.
중간에 오면 실행을 못하는 부분이 생기게되기 때문이다.
순차적으로 복합문들을 검사할 필요가 있다. 먼저오는 애에 return이 없는지 등을 확인해야한다.

while 문의 타입 검사 
while 문의 조건식은 반드시 bool 이어야하고 
반복문 내에 return이있어서는 안된다. 그냥 종료되어 버리기 때문에
while(E) S

read문에서 id는 임의의 타입이 가능하고 read문 실행 후에 결과 값은 없기 때문에 결과 타입은 void 
print 문에서 수식 임의의 타입이 가능하나 역시나 read문과 마찬가지로 void 타입이 된다.

let문의 타입 검사
이 타입 규칙은 let문을 위한 타입규칙이다. 새로 선언된 변수들의 타입정보를 추가한 새로운 let문 내의 실행 문장 S에 대한 검사를 한다.
1. let문이 추가되면 선언된 변수 id가 유효해짐으로 변수 id의 타입정보를 환경에 추가한다.
2. 이 새로운 타입환경에 맞춰서 새로운 검사가 진행된다.
3. 결정된 S가 새롭게 let문의 타입이 된다.

추가될 때 마다 갱신이되는 구조이다.

요약

타입 오류는 프로그램 실행중에 수식, 문장, 함수 등 프로그램 요소가 문제를 일으키는 것이다. 타입에 맞기 않게 사용되어
어떤 타입시스템이 안전하다는 것은 이 시스템 내의 모든 타입 검사를 마쳤다는 의미이므로 안정성을 보다 보장한다. 같은 맥락에서 실행했을때 오류가 발생하지 않을 것이다.

정적 타입 검사는 타입의 결정과 검사 모두가 컴파일 시간 안에 종료되는 것을 말한다. 주로 java, c/c++등에 사용된다.
타입 정보들을 이용하여 프로그램의 구성요소가 타입 정보에 맞게 올바르게 사용되고 있는지 검사하는 것이다.

타입 규칙은 수식, 함수, 문장 등 프로그램의 구성요소들의 타입에 관련한 규칙으로 이것이 지켜지지 않으면 오류가 발생한다. 올바른 타입 사용 방법을 알려준다.

타입 시스템은 이런 타입 정보와 타입 규칙이 포함된 시스템이다.

타입 환경은 특정 지점에서 유효한 변수들 혹은 함수들의 타입 정보를 유지하는 환경이다.
특정 지점마다 상태는 계속해서 변화할 수 있는데 그 각각의 상황을 타입 환경이라고 한다.
te로 표현한다.

식E에 의해 정의되는 어떤언어의 시스템을 만족하면 안전한 시스템이라고 말한다.

타입 시스템에 의해 어떤 프로그램의 구성요소가 검증되었고 E->t라고 정의되어있다면 실제 E를 계산했을 때 타입은 t여야한다.
반드시!

























