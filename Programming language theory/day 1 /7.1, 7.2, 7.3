7.1 타입오류와 타입검사
타입 오류란 : 프로그램의 구성요서가 잘못 쓰여 타입에 맞지 않는 오류가 생기는 것이다.
타입 검사의 필요성 : 실행 전에 모드 오류를 찾아낼 수 있으면 얼마나 좋아 안정성을 높일 수 있잖아 그래서 쓰이는 거야
타입 검사란 : 프로그램의 구성요소들이 타입구칙에 맞게 사용되고있는지 확인하는 것
정적 타입 검사란 : 이런 검사가 컴파일 시간 안에 일어나는 언어들의 시스템
동적 타입 검사란 : 이런 검사가 런타임 시간 안에 일어나는 언어들의 시스템

구문검사
저번 시험 범위에서 확인 했던 것

타입검사
강한 타입언어 : 규칙이 강력하다. 이 검사를 통과하면 런타임에 오류가 발생하는 일은 없다고할 수 있다. 장 점은 안정성이 높다는 것이다.
예시로는 python와 java가 있다.
엄격한 타입 규칙 적용
개발 속도: 엄격한 타입 검사를 통과하기 위해 더 많은 코드 작성이 필요할 수 있음.
유연성 부족: 타입 변환이나 동적 타입 사용이 어려울 수 있음.

약한 타입 언어 : 규칙이 약하다. 이 검사를 통과해서 런타임에 오류가 발생할 확률이 있다. 안정성이 낮다는 것이 단점이다. 
예시로는 js와 c/c++이 있다.
유연성: 타입 변환이 자유롭고 코드 작성이 간편함.
빠른 프로토타이핑: 개발 초기 단계에서 빠르게 개발 가능.


7.2 타입 시스템 개요
타입 시스템이란 : 프로그램의 구성 요소들로 이루어진 타입 규칙이 적용된 시스템
타입 규칙이란 : 프로그램의 구성 요소들이 올바른 타입에 맞게 사용되고 있는지를 확인할 수 있는 규칙
타입 환경이란 : 프로그램의 구성 요소들의 정보와 규칙이 만들어진 공간. 정의 공간이라고 생각하면 된다
안전한 타입 시스템 : 자신이 속해 있는 타입 규칙을 만족하는 시스템을 통과했다? > 이후 실행 단계에서도 오류가 나지 않을것이라는 보장을 해주는 것이다. 안정성 확보에 좋아.

7.3  언어 S의 타입 시스템
예시를 들어서 간략히 설명하는 부분

상수 및 변수의 타입 규칙 
타입환경에서 정수 n의 타입은 int, str 은 당연히 string, true false는 bool

수식의 타입 규칙
E1이 int이고 E2이 int이면 E1+E2도 int이다

이런 느낌으로 하는거야
관계 연산을 위한 타입 규칙
E1이 임의의 타입 t이고 E2이 t이면 E1==E2은 bool이다
이렇게 타입이 변화하기도 한다. 수식을 거쳐 가면서 

단항 연산을 위한 타입 규칙
!와 -가 주로 사용된다.
둘다 bool 형태로 확인이되지

대입문으의 타입 규칙

대입문 id =E를 위한 타입 규칙
1. 왼쪽 오른쪽의 타입이 동일해야한다.
2. 리턴 값없이 print read문이라면 결과 값이 void가 된다.

let문의 타입 규칙
1. 초기화 수식 E가 변수 id의 타입과 같아야한다.
2. let문으로 id 변수들이 추가되면 타입환경에 새로운 타입 규칙들과 정보들이 들어간다.
3. 이 새로운 타입 환경과 정보들을 기준으로 타입 규칙에 맞는지를 확인한다.

if문의 타입규칙
1. 조건식 E는 bool타입이어야하고
2. then 부분 문장과 else 부분 문장의 타입이 같아야한다.

while문의 타입 규칙
1. while의 조건식 E는 bool타입
2. while문 내에서 return 하면 안된다. 
S가 반드시 void 타입이어야한다.


리턴,프린트문의 타입 규칙
이후 계속 

복합문의 타입규칙
1. 첫문장은 반드시 void이어야하고
2. 중간에 return이 끼면 안된다.
