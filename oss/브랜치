브랜치 : 원본을 기반으로 사본에 기능을 추가할 수 있음
프로젝트를 독립적으로 관리할 수 있다.

브랜치의 특징
깃의 브랜치는가상 폴더로 생성함
외부적으로는 물리적인 파일 하나만 있는 것으로 보임 -> 클론을 대체함
생성된 작업 폴더는 물리적으로 복제된 구조보다 유연하게 처리할 수 있음
가상 폴더들 사이를 이동하는 것이 폴더 여러개 사이를 이동하는 것보다는 낫다

가상폴더도 폴더임 > 원본과 독립적으로 개발할 수 있음
병합처리는 유용해

빠른 동작
다양한 버전 관리 도구도 브랜치 기능을 지원함
보통 다른 VCS들은 브랜치를 생성할 때 내부 파일 전체를 복사함
파일 크기가 매우 크다면 브랜치를 생성하는 데 시간이 오래 걸림
깃의 브랜치 기능은 다른 버전 관리 도구보다 가볍고, 브랜치 전환이 빠른 것이 특징임
깃은 Blob 개념을 도입하여 내부를 구조화함 -> Blob은 포인트와 유사한 객체임

*Git에서 Blob은 파일의 내용을 나타내는 개념 -> 파일 내용 자체를 저장하는 객체
Blob 객체는 파일의 스냅샷을 나타내며 파일 내용의 해시 값으로 식별
각 Blob은 파일의 내용을 직접 저장하고, 파일의 경로와 이름 등의 메타데이터와 함께 Git 데이터베이스에 저장
Git은 Blob 객체를 사용하여 파일의 변경 이력을 추적하고 버전을 관리
파일의 내용이 변경될 때마다 새로운 Blob 객체가 생성되며, Git은 각 버전의 Blob을 통해 파일의 상태를 저장
커밋에는 Blob 객체를 가리키는 포인터가 포함되어 있어서 특정 시점의 파일 내용을 확인할 수 있습니다. 

깃은 브랜치를 변경할 때 포인터를 이동하여 빠르게 전환함
브랜치 명령을 사용하면 내부적으로 커밋을 하나 생성하여 브랜치로 할당함
깃은 해시(SHA1) 파일 하나만 만들면 됨 -> 브랜치를 더 빠르게 생성할 수 있음


실습 해보기
git init 으로 초기화 까지 한 상태에서 (이 때 master 브랜치를 생성하게 된다.)
git status
On branch master : 브랜치 작업 위치
git branch -> master 뿐


브랜치 생성
브랜치는 공통된 커밋을 가리키는 지점
브랜치는 커밋처럼 SHA1 해시키를 가리킨다.
이 해쉬 키는 16진수로 만들어진 굉장히 긴 값 -> 별칭을 만들어 준다 -> 이게 브랜치
새 브랜치를 생성하면 포인터만 있는 브랜치가 생성된다.
head는 현재 마지막 커밋을 가리킨다.

새로운 브랜치가 만들어지면 독립된 가상공간이 만들어짐
git init 으로 만들어진 메인 외의 브랜치는 수동 생성
브랜치는 개발 분기점을 의미

git branch 브랜치 이름 커밋 id
브랜치 이름까지만 입력하면 현재 head 포인터를 기준으로 새로운 브랜치를 생성한다.
직접 커밋인자를 지정하려면 지정한 그 id 기준으로 브랜치를 생성할 수 있다.


브랜치 이름
브랜치 이름은 슬래시(/)를 사용하여 계층적인 구조로 만들어서 사용할 수 있음

작성 규칙

기호(-)로 시작할 수 없음
마침표(.)로 시작할 수 없음
연속적인 마침표(..)를 포함할 수 없음
빈칸, 공백 문자, 물결(~), 캐럿(^), 물음표(?), 별표(*), 대괄호([ ]) 등은 포함할 수 없음
아스키 제어 문자는 포함할 수 없음

브랜치 확인
git branch : 브랜치 목록확인























