브랜치 : 원본을 기반으로 사본에 기능을 추가할 수 있음
프로젝트를 독립적으로 관리할 수 있다.

브랜치의 특징
깃의 브랜치는가상 폴더로 생성함
외부적으로는 물리적인 파일 하나만 있는 것으로 보임 -> 클론을 대체함
생성된 작업 폴더는 물리적으로 복제된 구조보다 유연하게 처리할 수 있음
가상 폴더들 사이를 이동하는 것이 폴더 여러개 사이를 이동하는 것보다는 낫다

가상폴더도 폴더임 > 원본과 독립적으로 개발할 수 있음
병합처리는 유용해

빠른 동작
다양한 버전 관리 도구도 브랜치 기능을 지원함
보통 다른 VCS들은 브랜치를 생성할 때 내부 파일 전체를 복사함
파일 크기가 매우 크다면 브랜치를 생성하는 데 시간이 오래 걸림
깃의 브랜치 기능은 다른 버전 관리 도구보다 가볍고, 브랜치 전환이 빠른 것이 특징임
깃은 Blob 개념을 도입하여 내부를 구조화함 -> Blob은 포인트와 유사한 객체임

*Git에서 Blob은 파일의 내용을 나타내는 개념 -> 파일 내용 자체를 저장하는 객체
Blob 객체는 파일의 스냅샷을 나타내며 파일 내용의 해시 값으로 식별
각 Blob은 파일의 내용을 직접 저장하고, 파일의 경로와 이름 등의 메타데이터와 함께 Git 데이터베이스에 저장
Git은 Blob 객체를 사용하여 파일의 변경 이력을 추적하고 버전을 관리
파일의 내용이 변경될 때마다 새로운 Blob 객체가 생성되며, Git은 각 버전의 Blob을 통해 파일의 상태를 저장
커밋에는 Blob 객체를 가리키는 포인터가 포함되어 있어서 특정 시점의 파일 내용을 확인할 수 있습니다. 

깃은 브랜치를 변경할 때 포인터를 이동하여 빠르게 전환함
브랜치 명령을 사용하면 내부적으로 커밋을 하나 생성하여 브랜치로 할당함
깃은 해시(SHA1) 파일 하나만 만들면 됨 -> 브랜치를 더 빠르게 생성할 수 있음


실습 해보기
git init 으로 초기화 까지 한 상태에서 (이 때 master 브랜치를 생성하게 된다.)
git status
On branch master : 브랜치 작업 위치
git branch -> master 뿐


브랜치 생성
브랜치는 공통된 커밋을 가리키는 지점
브랜치는 커밋처럼 SHA1 해시키를 가리킨다.
이 해쉬 키는 16진수로 만들어진 굉장히 긴 값 -> 별칭을 만들어 준다 -> 이게 브랜치
새 브랜치를 생성하면 포인터만 있는 브랜치가 생성된다.
head는 현재 마지막 커밋을 가리킨다.

새로운 브랜치가 만들어지면 독립된 가상공간이 만들어짐
git init 으로 만들어진 메인 외의 브랜치는 수동 생성
브랜치는 개발 분기점을 의미

git branch 브랜치 이름 커밋 id
브랜치 이름까지만 입력하면 현재 head 포인터를 기준으로 새로운 브랜치를 생성한다.
직접 커밋인자를 지정하려면 지정한 그 id 기준으로 브랜치를 생성할 수 있다.


브랜치 이름
브랜치 이름은 슬래시(/)를 사용하여 계층적인 구조로 만들어서 사용할 수 있음

작성 규칙

기호(-)로 시작할 수 없음
마침표(.)로 시작할 수 없음
연속적인 마침표(..)를 포함할 수 없음
빈칸, 공백 문자, 물결(~), 캐럿(^), 물음표(?), 별표(*), 대괄호([ ]) 등은 포함할 수 없음
아스키 제어 문자는 포함할 수 없음

브랜치 확인
git branch : 브랜치 목록확인
생성된 모든 브랜치를 보여준다.
별표(*)는 현재 선택된 브랜치를 의미함


브랜치 해시
브랜치는 특정한 커밋의 해시값을 가리킴
rev-parse를 이용하면 해시값을 표현할 수 있는데
git rev-parse HEAD^ 이런식으로 사용한다.
git log 이것도 해시값을 확인할 수 있다.


브랜치 이동

git checkout 브랜치 이름
워킹 디렉토리는 연결된 하나의 브랜치만을 가지고 있다.
한 브랜치에서만 작업 가능 

브랜치 동작원리
HEAD 정보는 항상 변경된 브랜치의 마지막 커밋을 가리킴
브랜치가 이동하면HEAD 포인터도 함께 이동
-> 이동하기 위해서는 워킹 디렉토리를 정리해야해
그래야만 넘어갈 수 있음

git checkout - : 이전 브랜치로 이동

워킹 디렉토리 정리 : 수정을하고 나면 등록과 커밋을 해줘야 정리가 된다.
git status 했을 때 남아있는 수정본이 있으면 브랜치 이동이 안된다.


브랜치 공간
브랜치 로그
git log --graph --all : 모든 로그를 출력함

HEAD 포인터
객체 포인터
마지막 커밋을 가리키는 참조 포인터
마지막 커밋 = 새로운 커밋의 부모
빠르게 스냅샷을 만들어낼 수 있다
이 포인터는 각 브랜치마다 하나씩 있다.
표현하는 방식
master 브랜치로 변경한 후 HEAD 포인터 위치는 이동된 브랜치의 마지막 커밋dcdb1c1을 가리킴
포인터의 위치는 ~을 가리킨다 라고 표현해주면 된다.

상대적 커밋 위치를 지정할 때는 ^나 ~를 같이 사용한다.
이 기호들은 head를 기준으로 몇번째인지 상대적인 위치를 지정해준다.

AHEAD, BHEAD
원격 저장소와 연동하여 깃을 관리한다면 브랜치마다 HEAD가 2개 있음 -> 원격과 로컬 2개
이 두 저장소는 다른 공간이기 때문에 마지막 커밋이 일치하지 않을 수 있음 
AHEAD, BHEAD는 서로 다른 저장소간 포인터의 위치차이를 의미한다.

1. AHEAD
서버로 전송되지 않은 로컬 커밋이 있는 것
로컬에는 존재하는 커밋
원격에는 존재하지 않은 커밋
-> 이때 발생하는 포인터

2. BHEAD
로컬로 내려받지 않은 커밋이 존재하는 경우


브랜치의 생성과 이동
git checkout -b 브랜치 이름 : 생성과 이동을 동시에 가능

커밋 이동
브랜치 이름은 커밋 해시키와 동일함
이동할 때 해시키를 사용해도 된다는 것
git checkout 해시키

이 해시키도 git branch -v 통해서 확인할 수 있음
이렇게 이동하면 브랜치 이름 대신 해시값으로 표현된다.

HEAD를 이용한 이동
git checkout HEAD~1 : git checkout -
현재의 한단계 전으로 이동
현재 :HEAD
현재 -1 :HEAD~1
현재 -2 :HEAD~2


원격 브랜치를 이용해 협업하는 방법
리모트 브랜치
실습 준비 원격 저장소에서 url 긁어오기
git remote add origin url주소 : 원격 저장소 등록
git remote -v : 원격저장소 목록



















