스태시 : 현재 수정중인 작업이 있는데 아직 커밋하지 않았어 그런데 다른 파일을 또 수정하고 싶은경우
쉽게 말해 안전 보관이다.
임시 저장 
브랜치 이동이 가능하게 한다.
스태시 명령을 실행하면 현재 작업 중인 내용은 임시 저장되고, 
수정 전 마지막커밋 상태로 돌아감 -> 이게 중요해 아직 수정되지 않은 부분은 반영되지 앟고 수정전 상태로 옮겨간다.

커밋을 완료한 경우 
git status를 확인하면 워킹디렉토리에 아무것도 없다고 뜬다. 근데 커밋을하지 않으면 
수정 상태에 있는 파일이 뜬다.

이때 어떻게해? 수정하다가 커밋하지 말고 
git stash : 임시저장
git stash save : 여러개의 파일을 임시 저장 해야하는 경우 + 메세지를 남기고 싶은 경우
이 후에 확인해보면 
git status : 워킹 디렉토리를 확인해보면 깔끔하다
브랜치 이동을 시도해도 멀쩡

스태시는 스택구조 
맨 마지막에 들어온 애가 젤 먼저 pop 된다
git stash list 를 확인해보면 지금 까지 만들어둔 스태시가 확인된다.
스태시는 항상 
.git/ref/stash에 저장된다. 이를 확인하고 싶으면 cat을 이용해서 확인할 수 있다

*cat에 대해서
cat 파일이름
-> 파일의 내용을 화면에 출력

cat 파일1 파일2
-> 파일1, 2를 차례대로 화면 출력
이런식으로 파일 내용을 확인할 때 주로 사용된다.

git stash show : 내용 비교
현재 워킹디렉토리 내용과 스태시 내용간의 차이가 무엇인지 내용비교
git stash show -p stash@{n} : n번째 스태시 내용을 확인하고 싶은 경우
git stash pop : 가장 최근 스태시를 보여주고 없앤다
목록을 확인해보면 없어진 것을 확인할 수 있다.

스태시 복원으로 인한 충돌은 수동 수정
git stash branch 새로운 브랜치 : 스태시를 브랜치에 적용
적용된 스태시는 목록을 확인해보면 삭제된 것을 확인할 수 있다.

스태시 복사
git stash apply : 스태시 복원 (보여주기) -> pop과 달리 삭제하지 않는다 copy와 같은 개념이 된다.
git stash apply stash@{n} : n번째 스태시를 보여줘~ 
특정 스태시를 복원하지 않고 그냥 apply만 하면 가장 최신 스태시로 복원하게된다.
git stash drop : 스태시 삭제

















