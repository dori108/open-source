원격(리모트) 브랜치
저장소는 각자의 고유한 브랜치를 생성하고 관리
원격 저장소에 설치한 브랜치로 로컬에서 생성된 브랜치와는 다른 것이다.
-> 합치기 위해서는 저장소를 동기화 해야한다.
보통 별칭/브랜치 이름 형태로 브랜치 이름을 정한다.
원격, 로컬의 이름은 반드시 일치하지 않아도 괜찮다.

git remote add origin url주소 : 원격저장소 등록 
-> 보통 깃헙에서 복사해와서 저렇게 뒤에 붙인다.

git remote -v : 원격 저장소 목록 확인
그러면 fetch 된 것과 push된 것이 두개 뜰 것

브랜치 추적
깃의 브랜치는 특정 커밋 해시값을 가리키는 포인터이다
추적 브랜치는 원격 브랜치의 마지막 커밋 해쉬값을 의미
ls .git/refs/ : 원격 브랜치 정보를 얻는다.
(In stash cat .git/refs/stash)

remote show : 브랜치 확인하기
git remote show origin(별명으로 쓰네) : 등록된 원격 브랜치의 리모트 브랜치 보여줘~

git push -u origin master : master 브랜치 전송
자세히 말하자면 로컬 브랜치를 push한거야 지금 > 로컬과 동일한 브랜치를 원격에서도 갖게되는 것이지 
지금 이 브랜치들은 로컬이 아니라 원격 브랜치들을 만드는 작업인거야.

git branch -v : 브랜치 목록 확인
git push -u origin hotfix : hotfix 브랜치를 전송한다. 이 작업은 hotfix 위에서 되네..? 그래도 되는 건가 
-> 원격 브랜치가 생성되는 것이다.

이러면 이제 원격 브랜치에 master, hotfix 브랜치 두개가 존재하게 된다.
이름이 다른 브랜치인 경우 
git push origin 브랜치 이름 : 새로운 브랜치
이렇게 하면 다른이름으로 브랜치 전송이 가능하다.

git push -u origin feature:function

*git push origin hotfix: 단순히 브랜치를 원격 저장소에 푸시한다.
git push -u origin hotfix: 브랜치를 원격 저장소에 푸시하고, 
추적 브랜치를 설정하여 이후에 git push와 git pull을 편리하게 사용할 수 있게 한다.

업스트림 트래킹
업스트림 = 브랜치 추적
리모트 브랜치와 로컬 브랜치를 연결해주는 중간다리역할

원격 저장소 복제하기
git clone 원격저장소 url 복제한 폴더 이름

앞으로는 복제한 폴더 이름으로 가서 실습한다.
git branch -v : 브랜치 목록 
막 클론해온 저장소는 master하나만 표시된다.
-r 옵션을 사용하면 원격 저장소의 브랜치 목록을 확인할 수 있다.

ex.
git branch -r
origin/HEAD ->origin/master
origin/function
origin/hotfix
...

git branch -a : 모든 브랜치 정보 확
git branch -vv : 트래킹 브랜치 목록 확인
트래킹 = 추적
추적된 것이 하나 뿐이라면 하나만 뜨겠지? 클론 해오면 브랜치는 master하나만 가져오고 나머지는 추적이 되지 않는다.
git checkout --track origin/브랜치 이름 : 직접 트래킹 브랜치 지정하기 -> 새로운 업스트림 생성할 수 있는 명령어

checkout 명령어가 포함되어있으니 브랜치 이동도 동시에 된다.
git branch -v : 트래킹 브랜치 목록을확인해보면 master + 추가한 브랜치 이름이 뜨는 것을 확인할 수 있다.

*git branch -v: 각 브랜치에 대한 로컬 커밋을 보여줌
각 브랜치 이름 옆에 커밋 해시와 커밋 메시지를 표시
git branch -vv: 로컬 브랜치에 대한 추가 정보를 제공
각 브랜치 이름 옆에 브랜치가 원격 추적 브랜치와 연결되어 있는지 여부를 표시
연결된 원격 추적 브랜치가 있으면 그 브랜치의 이름도 표시됩니다.

조금 더 많은 내용이 표시되네 -v는 커밋 해쉬, 메세지만 보여주고 
-vv는 +a

추가 실습을 해봅시다
파일 수정을 하고 등록, 커밋을 진행한다. 
이때 git branch -vv 확인해보면 브랜치 정보에 AHEAD1이 표시된다-> 원격저장소로 전송되지 않은 커밋이 하나 있다는 의미이다.
push 명령어를 이용하여 원격 저장소로 새롭게 추가된 커밋을 전송한다

정리해보자면
1. 파일 수정 등록 커밋 
2. -vv AHEAD1 포함되어있는 경우 원격저장소와 연결 안된 것이 있다는 의미
3. push를 이용해서 동기화 해야한다.
git push 

업스트림 트래킹

1. 원본 로컬 저장소로 이동 (실습하던 과정에 따르면 master 브랜치에 위치하지 않는다. 다른 파생 브랜치1 위에 있음)
2. 또 다른 파생 브랜치2로 이동
3. git pull : 원격 저장소의 파생 브랜치 1을 파생 브랜치2로 내려받는다.
4. 로컬 저장소의 파생 브랜치2에 수정한 내용이 잘 반영되었는지 확인한다.
cat branch.htm 
화면에 보여주는 명령어


원격 브랜치 복사

실습을 위해 파생 브랜치 aaa 생성
파생 브랜치2에서 
git fetch : 브랜치 커밋 가져오기
*git fetch 원격 저장소와 로컬 저장소간의 동기화 
원격 저장소의 변경 사항을 로컬 저장소로 가져오는 작업
만약 원격 저장소의 모든 브랜치를 업데이트하려면 추가로 "--all" 옵션을 사용

git branch -r : 원격 브랜치 확인
origin/aaa -> 추가된것을 확인할 수 있음

git checkout -b aaa origin/aaa : 브랜치 생성 및 이동 
위에서 페치 해서 가져온 aaa를 가져오는 것에서 끝내지 않고 원격 저장소의 aaa브랜치와 동기화 시키기 위해서 이런 명령어를 사용한다.
aaa(로컬)를 origin/aaa(원격)와 동기화

*"git fetch" 명령어는 원격 저장소의 변경 사항을 로컬 저장소로 가져오는 작업만 수행하고, 
로컬 브랜치를 생성하거나 변경하지 않습니다. 로컬 브랜치 변경이 연동되어 이루어지기 위해서는 원격과 연결 시켜줘야하고
그것을 저 명령어가 수행하는 것이다.

git branch -vv : 트래킹 목록 확인
수정 -> 등록,커밋 진행

git branch -vv 
ahead 1 남아있음 아까 이거 뭐라했지? -> 아직 동기화 되지 않은 커밋이 남아있다는 것이라고 했지?
push  명령어로 동기화 시켜주면 사라짐~

업스트림 연결
기존에 있는 브랜치를 업스트림으로 직접 설정할 수도 있음 -> 브랜치를 생성한 후 직접 트래킹 브랜치를 지정함
업스트림을 직접 설정하면 원격 저장소로 트래킹 브랜치가 설정됨
-u 옵션 : 이후에 push, pull 이렇게만 써도 작동하도록 한다.
기존 브랜치를 특정 원격 브랜치로 추적함 
한 번만 실행하면 이후로는 계속 업스트림으로 설정되어 작업할 수 있음

현재 브랜치에서 업스트림 실습을 하기 위해서 원격 저장소에 bbb라는 브랜치를 추가하고
git fetch 
해서 로컬에 가져온다
git branch -r 확인해보면 origin/bbb가 확인된다.
git checkout -b bug 
git branch -vv : 새로운 브랜치인 bug가 생긴 것을 확인할 수 있을 것이다.
git branch -u origin/bbb : 업스트림 연결 
git branch -vv 

*git branch -u origin/bbb : 현재 체크아웃된 브랜치를 원격 브랜치 origin/bbb와 연결하는 작업을 수행
이 명령은 로컬 브랜치와 원격 브랜치 간의 추적 관계를 설정하는 데 사용
** 추적 관계 설정 : 로컬 브랜치가 원격 브랜치를 자동으로 따라가도록 설정하는 것

브랜치 전송
git push : 원격 서버 전송
-> 오류 메세지 
왜 안되는거야? 
처음에는 커밋과 브랜치를 푸시하는 데 업스트림 설정이 필요함 원격 저장소 연결만으로 업스트림이 자동으로 설정되지는 않음
따로 작업을 해줘야한다. 추적관계 설정만으로는 안된다.

git push --set-upstream origin master
처음엔 이렇게 수동으로 브랜치 업스트림 설정을 해줘야한다.
= git push -u origin master


브랜치 페치
리모트 페치는 일반 커밋 페치와 동일
페치 > 원격에서 변경사항을 로컬로 가져오는 것
새로운 브랜치가 생성되지 않아! 
변경사항을 브랜치에 반영하고싶으면 병합을 해야한다.

fetch + merge  = pull

Fetch (가져오기):
기능: 원격 저장소의 최신 변경 사항을 로컬 저장소로 가져옵니다.
사용 방법: git fetch [remote-name]
설명: 원격 저장소의 변경 사항을 로컬로 가져와서 로컬 저장소를 업데이트하지만, 현재 작업 중인 브랜치에는 적용되지 않습니다. 단순히 로컬 저장소에 원격 브랜치의 최신 내용을 업데이트합니다.

Merge (병합):
기능: 서로 다른 브랜치의 변경 사항을 병합합니다.
사용 방법: git merge [branch-name]
설명: 서로 다른 브랜치에서의 변경 사항을 합치는 작업을 수행합니다. 주로 가져온 원격 브랜치의 변경 사항을 현재 작업 중인 브랜치로 병합할 때 사용됩니다.

Pull (가져오기 및 병합):
기능: 원격 저장소의 변경 사항을 로컬로 가져와서 병합합니다.
사용 방법: git pull [remote-name] [branch-name]
설명: fetch 명령어를 실행한 후에 자동으로 merge 명령어를 수행하여 원격 저장소의 변경 사항을 현재 작업 중인 브랜치로 가져오고 병합합니다. 즉, fetch + merge 작업을 수행합니다.

Push (푸시):
기능: 로컬 저장소의 변경 사항을 원격 저장소로 업로드합니다.
사용 방법: git push [remote-name] [branch-name]
설명: 로컬 저장소에서의 변경 사항을 원격 저장소로 업로드하여 원격 저장소를 업데이트합니다. 다른 개발자들과 작업을 공유하거나 백업하기 위해 사용됩니다.


브랜치 삭제
현재 자신이 위치한 브랜치는 삭제 불가 bug 브랜치에 있을 때
git branch -d bug
안된다

-d : 스테이지 상태 깨끗할 때 병합되지 않은 사항은 삭제 안된다 작업기록이 남아있으면 안된다.
-D : 강제 삭제 브랜치 위에서 파일을 수정하고 커밋한 기록이 남아있더라고 삭제가 가능

원격 브랜치 삭제
git push origin --delete 리모트 브랜치 이름
이 명령어를 이용해서 로컬에서 원격 브랜치 삭제가 가능하다.



** remote : 원격저장소 관련된 내용
