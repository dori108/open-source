커밋 : 코드의 변화를 기록하는 것(변경 이력과 시점을 커밋으로 기록한다.)
의미있는 단위의 변경 작업들을 저장소에 기록하는 동작이다.
스냅샷을 찍듯이 중간에 코드 변경과정을 기록해두길 원한다. -> 잘못했을 때 특정 시점으로 돌아가기 위해서
(블롭) -> 깃의 버전관리 시스템

코드의 변화
고식적 관리방법 vs 깃을 이용한 파일관리 방법
1. 고식적
파일을 계속 복사한다. -> 이름은 또 중복되면 안된다.
더 많은 파일의 관리 생성이 필요하다. -> 용량 많이 차지함
2. 깃
새로 변경된 부분만 추출해서 저장함
파일이름을 변경하지 않고도 동일한 파일 이름 하나로 관리가 가능

포인트 
변화되는 내용만 관리하고 (부모 커밋을 기반으로 변화된 부분만 관리)
시간 순서에 따라 영구적으로 저장된다.

실습
git init 초기화까지 진행한다.
파일 수정 (이 떄 워킹디렉토리에 새로운 파일이 등록되고 작업이 가능해진다.)> git status 확인하면 추적되지 않은 파일이 있다는 메세지가 뜸
깃의 상태 메시지에서 Untracked files 표시 부분을 확인함
새로운 파일이 워킹 디렉토리에 등록되었다는 것을 의미한다.

등록 : 워킹 디렉토리 위의 파일 > 추적가능상태로 만듦
스테이지 영역에 추가 
스테이지 영역에 추가되어야만 깃에서 이력 추적이 가능하다.
워킹 디렉토리 > 스테이지 영역 > 커밋
워킹 디렉터리에 추가된 모든 파일을 커밋할 때는 반드시 이 과정을 거쳐야 함

git add .
git add 파일 이름

안전한 상태를 유지하기 위해서 커밋 전에 이런 작업을 거치는 것이다.
빈 폴더는 add 할 수 없음
모든 폴더 x 원하는 폴더만 add해도 된다


파일 등록 취소
git status : 상태 확인
~ 명령어를 사용해서 unstage 해라 -> 이미 스테이징 되었다는 것이다.
추적 -> 비추척으로 바꿔보자

unstage로 만들려면 rm 또는 reset을 이용한다.
git rm --cached 파일 이름
-> 상태확인하면 untracked라고 써있음

한번이라도 커밋을 한 상태의 파일을 취소하려면 reset을 이용한다.
git reset HEAD 파일이름
이렇게 하면 커밋된 파일도 지울 수 있다.
-> 상태확인하면 커밋할게 아무것도 없다고 뜬다


등록된 파일이름이 변경된 경우
git mv 파일이름 새 파일이름

이 단계를 풀면

git add 파일이름
mv 파일이름 새파일이름
git rm --cached 파일이름
git add 새 파일이름



첫번째 커밋
head : 참조 포인터 가장 최근 커밋을 가리키는 해시값
단 깃을 설치하고 처음 커밋할 경우 헤드 포인터가 없음 ->  최소한 한 번 이상 커밋을 해야만 HEAD가 존재함

스냅샷
커밋은 영구적이고 시간 순서대로이고 개별적으로 변경사항을 저장하는 것인데
부모 커밋에 비교해서 변경된 부분만 바꾼다는 것이 의의
HEAD가 가리키는 커밋을 기반으로 사진을 찍는다.
빠르게 버전 사이 차이를 정리하고 고전식으로 파일을 복사하는 것보다 용량소비가 적다.


tracked 상태인 파일을 수정하면 다시 modified 상태로 변경됨 modified는 untracked 상태임
다시 add해줘야한다.

커밋하기 전에는 워킹디렉토리를 정리해줘야한다 안그러면 할 수 가없음
커밋은 수정된 내용을 한 번 만 등록한다.
같은 내용을 두 번 커밋할 수는 없다.

git commit
깃의 commit은 HEAD와 스테이지 영역간의 차이를 비교하여 새로운 객체를 생성한다.
커밋 메세지 
메세지를 같이 작성해야한다. 커밋 내용끼리 구별이 가도록
모든 커밋은 반드시 커밋 메시지를 작성해야 함!!
그냥 git commit 하면 메세지를 남기도록 에디터가 열린다.
커밋 메시지를 작성하지 않아 커밋이 거부되었다는 메시지임
vi 에디터에 아무 내용도 넣지 않고 종료하면 커밋 명령은 취소됨


git commit -a : 등록과 커밋을 동시에
git commit -am 보통이렇게 사용하지

커밋확인
git status : working tree clean : 커밋할게 더이상 없는거야
git log 통해서 커밋기록을 확인 해쉬값 확인 


두번째 커밋
파일수정 > 상태확인 > 수정중 확인 
git checkout --수정파일 이름 : 수정한 파일을 커밋 전 마지막 내용으로 돌릴 수 있다.

이렇게 하면 다시 언스테이지 상태가 되는거지
다시 등록해야한다 재등록하면 이제 수정 중이라고 뜨긴하는데 붉은 색이 아니라 녹색으로 뜰 것

메세지가 없는 빈 커밋
메세지를 안 넣으면 수정 자체가 되지 않지만 명령어를 사용하면 허용가능하다
git commit --allow-empty-message -m""
중간에 빈 메세지를 허용 이라는 명령어를 사용한다.


커밋 아이디
git log 에서 해쉬값 = 아이디
SHA1 해쉬 알고리즘 40자리의 16진수 값으로 이루어짐
중복되지않는 고유의 키를 생성한다. -> 충돌방지
앞 7개의 숫자만을 시용해도 괜찮다.

커밋 로그
git log --pretty=short : 로그를 출력할 때 첫번째줄의 커밋메세지만 출력한다.

특정커밋의 상세 정보 확인하기
git show 커밋아이디

특정파일의 로그 기록 확인하기
git log 파일이름

옵션
• -p 옵션: diff 기능(수정한 라인 비교)을 같이 포함하여 출력할 수 있음
• --stat 옵션: 히스토리를 출력함
• --pretty=oneline 옵션: 각 커밋을 한 줄로 표시함


diff 명령어
1. 워킹 디렉토리 / 스테이지
파일간 차이를 보여주는 명령어 수정내용 변경 내용을 확인할 수 있다.
아직 add 명령어로 파일을 추가하지 않은 경우, 워킹 디렉터리와 스테이지 영역간 변경 사항을 비교할 수 있음
코드 수정만 한 상황에서 git diff
변경 내용을 add하면 두 상태가 같아지기 때문에 비교가 의미 없다

2.커밋전 상태에서 최신 커밋 내역과 비교해서 보기
git diff head : head 포인터 입력

3.커밋간의 차이
소스트리에서 확인하는것이 가장 편해 빨강 초록으로 가감을 확인할 수 있음

diff 기능 장점
자신이 수정한 부분들을 쉽게 찾을 수 있도록 도와줌
또 다른 사람들과 협업하여 개발하는 과정에서 코드를 리뷰할 때 수정된 부분만 확인하면 되므로 좀 더 쉽게 검토할 수 있음

git commit -v : 커밋 메세지 작성하는 에디터에서 diff내용 추가 




