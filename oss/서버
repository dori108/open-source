서버 저장소 = 원격 저장소 
로컬 저장소의 복사본
협업을 위해 탄생
원격 저장소가 있으면 로컬 컴퓨터를 가지고있지 않아도 이어 작업이 가능하다.

원격 저장소가 있으려면 로컬 저장소가 있어야한다.
mkdir 폴더 이름
cd 폴더 이름 
git init 

이건 세트야
로컬 저장소를 만들고 저장하는
echo "# folder name" >> README.md 
따옴표 안의 내용을 보여주고 리드미 파일에 저장하라는 것
git add README.md
git commit -m"first commit"


원격 저장소의 리모트 목록 관리
깃은 저장소 관리에 remote 명령어를 이용한다.
등록 취소등의 작업이 가능하다.

git remote : 저장소 목록확인
git remote -v : 저장소 별칭과 url확인


주소와 별칭 
로컬 저장소애 원격 저장소를 등록하려면 서버 주소가 필요하다.
별칭 : 긴서버 문자열을 별칭으로 대치하여 사용
origin이 대표적 별칭이다.
git remote add 원격저장소 별칭 url : 원격저장소에 연결
이렇게 하고 원격 저장소 목록을 확인하면 
git remote -v: origin ~ fetch
origin ~ push

이렇게 뜰 것이다.
두 주소를 출력한다. 

별칭 변경, 정보확인
git remote rename 변경 전 변경 후 : 이름 바꾸기
git remote show origin : 상세 정보확인
git remote rm origin : 원격 서버 삭제
이후에
git remote -v: 없어 지웠으니까
git remote add origin 원격저장소 url : 재등록


push 
서버 전송
git push origin 원격 저장소 이름
원격 저장소로 로컬 깃 저장소의 내용 전송하는 경우

자동으로 내려 받기
clone : 복제
git clone 원격저장소 url .(현재 그 폴더에 추가하라는 말)
ls -all: 목록확인
파일의 모든 목록 확인

복제 후에 원격저장소 목록을 확인해보면 
git remote -v: origin ~ fetch
origin ~ push
으로 같을 것이다.
이제 클론을 하면 
로컬/ 원격/ 로컬의 클론
세개의 파일을 갖게된다.

pull : 원격 저장소에서 로컬로 갱신된 내용들을 추가로 받는다.
최신화 시켜주는 명령어라고 생각하면 될 것 같은데

실습을 위해서 클론 말고 원본으로 이동한다.
cd ..
cd 원본파일

수정 > 등록 > 커밋
git push origin master

cd ../클론파일
git log 
체크 한번 해보면 원본에서 수정한 부분이 복제본에는 아직 반영되지 않았다.
git pull 
이제 수정 부분이 클론에도 추가된 것을 확인할 수 있다.

수동으로 내려받기
원격 저장소의 내용을 로컬로 배려받는 방법은
fetch, pull 두 가지인데
병합 자동 처리 하냐 마냐가 차이점이다.

pull = fetch + merge

협업과정에서 가끔 pull은 충돌 > 이때 fetch를 이용하는거야

정리
1. 원본 파일 수정
2. 원격 저장소로 push
3. 클론으로 이동
4. pull이용해서 최신 내용 받아오기

fetch 이용하는 경우에는 merge 안해주면 log에서 내역확인이 불가능함 commit내역을

순서
원격 저장소에 push하려면 로컬 저장소를 최신으로 유지해야한다.
push는 서버의 마지막 커밋과 푸시되는 커밋을 병합한다.
커밋이 순차적이지 않으면 깃은 push를 거부한다. -> pull 통한 최신화가 필요한 이유이다.
로컬을 최신화 하고 다시 푸시한다.
-> 충돌 방지를 위한것이다. 애초에 push가 안되게 해버리는 거야 커밋 시간이 늦으면

pull coding commit pull push
이 순서를 지키면 충돌할 일은 없징

